
Midterm_Exam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ea0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002fac  08002fac  00012fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fcc  08002fcc  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08002fcc  08002fcc  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fcc  08002fcc  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fcc  08002fcc  00012fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fd0  08002fd0  00012fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08002fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000040  08003014  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08003014  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009447  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba6  00000000  00000000  000294b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002b058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002bac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170a1  00000000  00000000  0002c3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ccff  00000000  00000000  00043499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082102  00000000  00000000  00050198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d229a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002820  00000000  00000000  000d22f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f94 	.word	0x08002f94

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	08002f94 	.word	0x08002f94

0800014c <fsm_LedBlinky_run>:
 *  Created on: Nov 5, 2022
 *      Author: Student
 */
#include "LedBlinky.h"

void fsm_LedBlinky_run(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(led_status){
 8000150:	4b1f      	ldr	r3, [pc, #124]	; (80001d0 <fsm_LedBlinky_run+0x84>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b02      	cmp	r3, #2
 8000156:	d021      	beq.n	800019c <fsm_LedBlinky_run+0x50>
 8000158:	2b02      	cmp	r3, #2
 800015a:	dc36      	bgt.n	80001ca <fsm_LedBlinky_run+0x7e>
 800015c:	2b00      	cmp	r3, #0
 800015e:	d002      	beq.n	8000166 <fsm_LedBlinky_run+0x1a>
 8000160:	2b01      	cmp	r3, #1
 8000162:	d007      	beq.n	8000174 <fsm_LedBlinky_run+0x28>
				led_status = LED_ON;
				setTimer3(100);
			}
			break;
}
}
 8000164:	e031      	b.n	80001ca <fsm_LedBlinky_run+0x7e>
			led_status = LED_ON;
 8000166:	4b1a      	ldr	r3, [pc, #104]	; (80001d0 <fsm_LedBlinky_run+0x84>)
 8000168:	2201      	movs	r2, #1
 800016a:	601a      	str	r2, [r3, #0]
			setTimer3(100);
 800016c:	2064      	movs	r0, #100	; 0x64
 800016e:	f001 fb05 	bl	800177c <setTimer3>
		break;
 8000172:	e02a      	b.n	80001ca <fsm_LedBlinky_run+0x7e>
			if(timer3_flag == 1){
 8000174:	4b17      	ldr	r3, [pc, #92]	; (80001d4 <fsm_LedBlinky_run+0x88>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d123      	bne.n	80001c4 <fsm_LedBlinky_run+0x78>
				timer3_flag = 0;
 800017c:	4b15      	ldr	r3, [pc, #84]	; (80001d4 <fsm_LedBlinky_run+0x88>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000182:	2200      	movs	r2, #0
 8000184:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000188:	4813      	ldr	r0, [pc, #76]	; (80001d8 <fsm_LedBlinky_run+0x8c>)
 800018a:	f001 fef2 	bl	8001f72 <HAL_GPIO_WritePin>
				led_status = LED_OFF;
 800018e:	4b10      	ldr	r3, [pc, #64]	; (80001d0 <fsm_LedBlinky_run+0x84>)
 8000190:	2202      	movs	r2, #2
 8000192:	601a      	str	r2, [r3, #0]
				setTimer3(100);
 8000194:	2064      	movs	r0, #100	; 0x64
 8000196:	f001 faf1 	bl	800177c <setTimer3>
			break;
 800019a:	e013      	b.n	80001c4 <fsm_LedBlinky_run+0x78>
			if(timer3_flag == 1){
 800019c:	4b0d      	ldr	r3, [pc, #52]	; (80001d4 <fsm_LedBlinky_run+0x88>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	2b01      	cmp	r3, #1
 80001a2:	d111      	bne.n	80001c8 <fsm_LedBlinky_run+0x7c>
				timer3_flag = 0;
 80001a4:	4b0b      	ldr	r3, [pc, #44]	; (80001d4 <fsm_LedBlinky_run+0x88>)
 80001a6:	2200      	movs	r2, #0
 80001a8:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80001aa:	2201      	movs	r2, #1
 80001ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001b0:	4809      	ldr	r0, [pc, #36]	; (80001d8 <fsm_LedBlinky_run+0x8c>)
 80001b2:	f001 fede 	bl	8001f72 <HAL_GPIO_WritePin>
				led_status = LED_ON;
 80001b6:	4b06      	ldr	r3, [pc, #24]	; (80001d0 <fsm_LedBlinky_run+0x84>)
 80001b8:	2201      	movs	r2, #1
 80001ba:	601a      	str	r2, [r3, #0]
				setTimer3(100);
 80001bc:	2064      	movs	r0, #100	; 0x64
 80001be:	f001 fadd 	bl	800177c <setTimer3>
			break;
 80001c2:	e001      	b.n	80001c8 <fsm_LedBlinky_run+0x7c>
			break;
 80001c4:	bf00      	nop
 80001c6:	e000      	b.n	80001ca <fsm_LedBlinky_run+0x7e>
			break;
 80001c8:	bf00      	nop
}
 80001ca:	bf00      	nop
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	20000074 	.word	0x20000074
 80001d4:	2000008c 	.word	0x2000008c
 80001d8:	40010800 	.word	0x40010800

080001dc <subKeyProcess>:
int KeyReg3 = NORMAL_STATE;
int KeyReg7 = NORMAL_STATE;
int KeyReg11 = NORMAL_STATE;
int TimerForKeyPress = 200;

void subKeyProcess(){
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
	//TODO
	RESET_flag = 1;
 80001e0:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <subKeyProcess+0x14>)
 80001e2:	2201      	movs	r2, #1
 80001e4:	601a      	str	r2, [r3, #0]
}
 80001e6:	bf00      	nop
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bc80      	pop	{r7}
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	2000005c 	.word	0x2000005c

080001f4 <subKeyProcess1>:
void subKeyProcess1(){
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
	INC_flag = 1;
 80001f8:	4b03      	ldr	r3, [pc, #12]	; (8000208 <subKeyProcess1+0x14>)
 80001fa:	2201      	movs	r2, #1
 80001fc:	601a      	str	r2, [r3, #0]
}
 80001fe:	bf00      	nop
 8000200:	46bd      	mov	sp, r7
 8000202:	bc80      	pop	{r7}
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	20000060 	.word	0x20000060

0800020c <subKeyProcess2>:
void subKeyProcess2(){
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
	DEC_flag = 1;
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <subKeyProcess2+0x14>)
 8000212:	2201      	movs	r2, #1
 8000214:	601a      	str	r2, [r3, #0]
}
 8000216:	bf00      	nop
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	20000068 	.word	0x20000068

08000224 <getKeyInput>:
void getKeyInput(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	KeyReg0 = KeyReg1;
 8000228:	4b1f      	ldr	r3, [pc, #124]	; (80002a8 <getKeyInput+0x84>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a1f      	ldr	r2, [pc, #124]	; (80002ac <getKeyInput+0x88>)
 800022e:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 8000230:	4b1f      	ldr	r3, [pc, #124]	; (80002b0 <getKeyInput+0x8c>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a1c      	ldr	r2, [pc, #112]	; (80002a8 <getKeyInput+0x84>)
 8000236:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin);
 8000238:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800023c:	481d      	ldr	r0, [pc, #116]	; (80002b4 <getKeyInput+0x90>)
 800023e:	f001 fe81 	bl	8001f44 <HAL_GPIO_ReadPin>
 8000242:	4603      	mov	r3, r0
 8000244:	461a      	mov	r2, r3
 8000246:	4b1a      	ldr	r3, [pc, #104]	; (80002b0 <getKeyInput+0x8c>)
 8000248:	601a      	str	r2, [r3, #0]
	if((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)){
 800024a:	4b18      	ldr	r3, [pc, #96]	; (80002ac <getKeyInput+0x88>)
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	4b16      	ldr	r3, [pc, #88]	; (80002a8 <getKeyInput+0x84>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	429a      	cmp	r2, r3
 8000254:	d125      	bne.n	80002a2 <getKeyInput+0x7e>
 8000256:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <getKeyInput+0x84>)
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	4b15      	ldr	r3, [pc, #84]	; (80002b0 <getKeyInput+0x8c>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	429a      	cmp	r2, r3
 8000260:	d11f      	bne.n	80002a2 <getKeyInput+0x7e>
		if(KeyReg3 != KeyReg2){
 8000262:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <getKeyInput+0x94>)
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <getKeyInput+0x8c>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	429a      	cmp	r2, r3
 800026c:	d00d      	beq.n	800028a <getKeyInput+0x66>
			KeyReg3 = KeyReg2;
 800026e:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <getKeyInput+0x8c>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a11      	ldr	r2, [pc, #68]	; (80002b8 <getKeyInput+0x94>)
 8000274:	6013      	str	r3, [r2, #0]
			if(KeyReg2 == PRESSED_STATE){
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <getKeyInput+0x8c>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d111      	bne.n	80002a2 <getKeyInput+0x7e>
				//TODO
				subKeyProcess();
 800027e:	f7ff ffad 	bl	80001dc <subKeyProcess>
				TimerForKeyPress = 200;
 8000282:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <getKeyInput+0x98>)
 8000284:	22c8      	movs	r2, #200	; 0xc8
 8000286:	601a      	str	r2, [r3, #0]
				KeyReg3 = NORMAL_STATE;
				//TODO
			}
		}
	}
}
 8000288:	e00b      	b.n	80002a2 <getKeyInput+0x7e>
			TimerForKeyPress--;
 800028a:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <getKeyInput+0x98>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	3b01      	subs	r3, #1
 8000290:	4a0a      	ldr	r2, [pc, #40]	; (80002bc <getKeyInput+0x98>)
 8000292:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 8000294:	4b09      	ldr	r3, [pc, #36]	; (80002bc <getKeyInput+0x98>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d102      	bne.n	80002a2 <getKeyInput+0x7e>
				KeyReg3 = NORMAL_STATE;
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <getKeyInput+0x94>)
 800029e:	2201      	movs	r2, #1
 80002a0:	601a      	str	r2, [r3, #0]
}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000004 	.word	0x20000004
 80002ac:	20000000 	.word	0x20000000
 80002b0:	20000008 	.word	0x20000008
 80002b4:	40011000 	.word	0x40011000
 80002b8:	20000024 	.word	0x20000024
 80002bc:	20000030 	.word	0x20000030

080002c0 <getKeyInput1>:
void getKeyInput1(){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	KeyReg4 = KeyReg5;
 80002c4:	4b20      	ldr	r3, [pc, #128]	; (8000348 <getKeyInput1+0x88>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a20      	ldr	r2, [pc, #128]	; (800034c <getKeyInput1+0x8c>)
 80002ca:	6013      	str	r3, [r2, #0]
	KeyReg5 = KeyReg6;
 80002cc:	4b20      	ldr	r3, [pc, #128]	; (8000350 <getKeyInput1+0x90>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a1d      	ldr	r2, [pc, #116]	; (8000348 <getKeyInput1+0x88>)
 80002d2:	6013      	str	r3, [r2, #0]
	KeyReg6 = HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin);
 80002d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002d8:	481e      	ldr	r0, [pc, #120]	; (8000354 <getKeyInput1+0x94>)
 80002da:	f001 fe33 	bl	8001f44 <HAL_GPIO_ReadPin>
 80002de:	4603      	mov	r3, r0
 80002e0:	461a      	mov	r2, r3
 80002e2:	4b1b      	ldr	r3, [pc, #108]	; (8000350 <getKeyInput1+0x90>)
 80002e4:	601a      	str	r2, [r3, #0]
		if((KeyReg4 == KeyReg5) && (KeyReg5 == KeyReg6)){
 80002e6:	4b19      	ldr	r3, [pc, #100]	; (800034c <getKeyInput1+0x8c>)
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	4b17      	ldr	r3, [pc, #92]	; (8000348 <getKeyInput1+0x88>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d128      	bne.n	8000344 <getKeyInput1+0x84>
 80002f2:	4b15      	ldr	r3, [pc, #84]	; (8000348 <getKeyInput1+0x88>)
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	4b16      	ldr	r3, [pc, #88]	; (8000350 <getKeyInput1+0x90>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d122      	bne.n	8000344 <getKeyInput1+0x84>
			if(KeyReg7 != KeyReg6){
 80002fe:	4b16      	ldr	r3, [pc, #88]	; (8000358 <getKeyInput1+0x98>)
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	4b13      	ldr	r3, [pc, #76]	; (8000350 <getKeyInput1+0x90>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	429a      	cmp	r2, r3
 8000308:	d00d      	beq.n	8000326 <getKeyInput1+0x66>
				KeyReg7 = KeyReg6;
 800030a:	4b11      	ldr	r3, [pc, #68]	; (8000350 <getKeyInput1+0x90>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a12      	ldr	r2, [pc, #72]	; (8000358 <getKeyInput1+0x98>)
 8000310:	6013      	str	r3, [r2, #0]
				if(KeyReg6 == PRESSED_STATE){
 8000312:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <getKeyInput1+0x90>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d114      	bne.n	8000344 <getKeyInput1+0x84>
					//TODO
					subKeyProcess1();
 800031a:	f7ff ff6b 	bl	80001f4 <subKeyProcess1>
					TimerForKeyPress = 200;
 800031e:	4b0f      	ldr	r3, [pc, #60]	; (800035c <getKeyInput1+0x9c>)
 8000320:	22c8      	movs	r2, #200	; 0xc8
 8000322:	601a      	str	r2, [r3, #0]
					KeyReg7 = NORMAL_STATE;
					//TODO
				}
			}
		}
}
 8000324:	e00e      	b.n	8000344 <getKeyInput1+0x84>
				TimerForKeyPress--;
 8000326:	4b0d      	ldr	r3, [pc, #52]	; (800035c <getKeyInput1+0x9c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	3b01      	subs	r3, #1
 800032c:	4a0b      	ldr	r2, [pc, #44]	; (800035c <getKeyInput1+0x9c>)
 800032e:	6013      	str	r3, [r2, #0]
				if(TimerForKeyPress == 0){
 8000330:	4b0a      	ldr	r3, [pc, #40]	; (800035c <getKeyInput1+0x9c>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d105      	bne.n	8000344 <getKeyInput1+0x84>
					INC_flag1 = 1;
 8000338:	4b09      	ldr	r3, [pc, #36]	; (8000360 <getKeyInput1+0xa0>)
 800033a:	2201      	movs	r2, #1
 800033c:	601a      	str	r2, [r3, #0]
					KeyReg7 = NORMAL_STATE;
 800033e:	4b06      	ldr	r3, [pc, #24]	; (8000358 <getKeyInput1+0x98>)
 8000340:	2201      	movs	r2, #1
 8000342:	601a      	str	r2, [r3, #0]
}
 8000344:	bf00      	nop
 8000346:	bd80      	pop	{r7, pc}
 8000348:	20000010 	.word	0x20000010
 800034c:	2000000c 	.word	0x2000000c
 8000350:	20000014 	.word	0x20000014
 8000354:	40011000 	.word	0x40011000
 8000358:	20000028 	.word	0x20000028
 800035c:	20000030 	.word	0x20000030
 8000360:	20000064 	.word	0x20000064

08000364 <getKeyInput2>:
void getKeyInput2(){
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	KeyReg8 = KeyReg9;
 8000368:	4b20      	ldr	r3, [pc, #128]	; (80003ec <getKeyInput2+0x88>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a20      	ldr	r2, [pc, #128]	; (80003f0 <getKeyInput2+0x8c>)
 800036e:	6013      	str	r3, [r2, #0]
	KeyReg9 = KeyReg10;
 8000370:	4b20      	ldr	r3, [pc, #128]	; (80003f4 <getKeyInput2+0x90>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a1d      	ldr	r2, [pc, #116]	; (80003ec <getKeyInput2+0x88>)
 8000376:	6013      	str	r3, [r2, #0]
	KeyReg10 = HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin);
 8000378:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800037c:	481e      	ldr	r0, [pc, #120]	; (80003f8 <getKeyInput2+0x94>)
 800037e:	f001 fde1 	bl	8001f44 <HAL_GPIO_ReadPin>
 8000382:	4603      	mov	r3, r0
 8000384:	461a      	mov	r2, r3
 8000386:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <getKeyInput2+0x90>)
 8000388:	601a      	str	r2, [r3, #0]
		if((KeyReg8 == KeyReg9) && (KeyReg9 == KeyReg10)){
 800038a:	4b19      	ldr	r3, [pc, #100]	; (80003f0 <getKeyInput2+0x8c>)
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	4b17      	ldr	r3, [pc, #92]	; (80003ec <getKeyInput2+0x88>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	429a      	cmp	r2, r3
 8000394:	d128      	bne.n	80003e8 <getKeyInput2+0x84>
 8000396:	4b15      	ldr	r3, [pc, #84]	; (80003ec <getKeyInput2+0x88>)
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	4b16      	ldr	r3, [pc, #88]	; (80003f4 <getKeyInput2+0x90>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	429a      	cmp	r2, r3
 80003a0:	d122      	bne.n	80003e8 <getKeyInput2+0x84>
			if(KeyReg11 != KeyReg10){
 80003a2:	4b16      	ldr	r3, [pc, #88]	; (80003fc <getKeyInput2+0x98>)
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <getKeyInput2+0x90>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d00d      	beq.n	80003ca <getKeyInput2+0x66>
				KeyReg11 = KeyReg10;
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <getKeyInput2+0x90>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	4a12      	ldr	r2, [pc, #72]	; (80003fc <getKeyInput2+0x98>)
 80003b4:	6013      	str	r3, [r2, #0]
				if(KeyReg10 == PRESSED_STATE){
 80003b6:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <getKeyInput2+0x90>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d114      	bne.n	80003e8 <getKeyInput2+0x84>
					//TODO
					subKeyProcess2();
 80003be:	f7ff ff25 	bl	800020c <subKeyProcess2>
					TimerForKeyPress = 200;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <getKeyInput2+0x9c>)
 80003c4:	22c8      	movs	r2, #200	; 0xc8
 80003c6:	601a      	str	r2, [r3, #0]
					KeyReg11 = NORMAL_STATE;
					//TODO
				}
			}
		}
}
 80003c8:	e00e      	b.n	80003e8 <getKeyInput2+0x84>
				TimerForKeyPress--;
 80003ca:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <getKeyInput2+0x9c>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	4a0b      	ldr	r2, [pc, #44]	; (8000400 <getKeyInput2+0x9c>)
 80003d2:	6013      	str	r3, [r2, #0]
				if(TimerForKeyPress == 0){
 80003d4:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <getKeyInput2+0x9c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d105      	bne.n	80003e8 <getKeyInput2+0x84>
					DEC_flag1 = 1;
 80003dc:	4b09      	ldr	r3, [pc, #36]	; (8000404 <getKeyInput2+0xa0>)
 80003de:	2201      	movs	r2, #1
 80003e0:	601a      	str	r2, [r3, #0]
					KeyReg11 = NORMAL_STATE;
 80003e2:	4b06      	ldr	r3, [pc, #24]	; (80003fc <getKeyInput2+0x98>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	601a      	str	r2, [r3, #0]
}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	2000001c 	.word	0x2000001c
 80003f0:	20000018 	.word	0x20000018
 80003f4:	20000020 	.word	0x20000020
 80003f8:	40011000 	.word	0x40011000
 80003fc:	2000002c 	.word	0x2000002c
 8000400:	20000030 	.word	0x20000030
 8000404:	2000006c 	.word	0x2000006c

08000408 <display7SEG>:
 *
 *  Created on: Nov 5, 2022
 *      Author: ADMIN
 */
#include "display7SEG.h"
void display7SEG (int num){
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	2b09      	cmp	r3, #9
 8000414:	f200 8180 	bhi.w	8000718 <display7SEG+0x310>
 8000418:	a201      	add	r2, pc, #4	; (adr r2, 8000420 <display7SEG+0x18>)
 800041a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800041e:	bf00      	nop
 8000420:	08000449 	.word	0x08000449
 8000424:	08000491 	.word	0x08000491
 8000428:	080004d9 	.word	0x080004d9
 800042c:	08000521 	.word	0x08000521
 8000430:	08000569 	.word	0x08000569
 8000434:	080005b1 	.word	0x080005b1
 8000438:	080005f9 	.word	0x080005f9
 800043c:	08000641 	.word	0x08000641
 8000440:	08000689 	.word	0x08000689
 8000444:	080006d1 	.word	0x080006d1
	switch (num){
	case 0 : {
		 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_1 , GPIO_PIN_RESET );
 8000448:	2200      	movs	r2, #0
 800044a:	2102      	movs	r1, #2
 800044c:	48b5      	ldr	r0, [pc, #724]	; (8000724 <display7SEG+0x31c>)
 800044e:	f001 fd90 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin (GPIOA , GPIO_PIN_2 , GPIO_PIN_RESET );
 8000452:	2200      	movs	r2, #0
 8000454:	2104      	movs	r1, #4
 8000456:	48b3      	ldr	r0, [pc, #716]	; (8000724 <display7SEG+0x31c>)
 8000458:	f001 fd8b 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin (GPIOA , GPIO_PIN_3 , GPIO_PIN_RESET );
 800045c:	2200      	movs	r2, #0
 800045e:	2108      	movs	r1, #8
 8000460:	48b0      	ldr	r0, [pc, #704]	; (8000724 <display7SEG+0x31c>)
 8000462:	f001 fd86 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin (GPIOA , GPIO_PIN_4 , GPIO_PIN_RESET );
 8000466:	2200      	movs	r2, #0
 8000468:	2110      	movs	r1, #16
 800046a:	48ae      	ldr	r0, [pc, #696]	; (8000724 <display7SEG+0x31c>)
 800046c:	f001 fd81 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin (GPIOA , GPIO_PIN_5 , GPIO_PIN_RESET );
 8000470:	2200      	movs	r2, #0
 8000472:	2120      	movs	r1, #32
 8000474:	48ab      	ldr	r0, [pc, #684]	; (8000724 <display7SEG+0x31c>)
 8000476:	f001 fd7c 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin (GPIOA , GPIO_PIN_6 , GPIO_PIN_RESET );
 800047a:	2200      	movs	r2, #0
 800047c:	2140      	movs	r1, #64	; 0x40
 800047e:	48a9      	ldr	r0, [pc, #676]	; (8000724 <display7SEG+0x31c>)
 8000480:	f001 fd77 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin (GPIOA , GPIO_PIN_7 , GPIO_PIN_SET );
 8000484:	2201      	movs	r2, #1
 8000486:	2180      	movs	r1, #128	; 0x80
 8000488:	48a6      	ldr	r0, [pc, #664]	; (8000724 <display7SEG+0x31c>)
 800048a:	f001 fd72 	bl	8001f72 <HAL_GPIO_WritePin>

		break;
 800048e:	e144      	b.n	800071a <display7SEG+0x312>
	}
	case 1 :{
		  HAL_GPIO_WritePin (GPIOA , GPIO_PIN_1 , GPIO_PIN_SET );
 8000490:	2201      	movs	r2, #1
 8000492:	2102      	movs	r1, #2
 8000494:	48a3      	ldr	r0, [pc, #652]	; (8000724 <display7SEG+0x31c>)
 8000496:	f001 fd6c 	bl	8001f72 <HAL_GPIO_WritePin>
			  	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_2 , GPIO_PIN_RESET );
 800049a:	2200      	movs	r2, #0
 800049c:	2104      	movs	r1, #4
 800049e:	48a1      	ldr	r0, [pc, #644]	; (8000724 <display7SEG+0x31c>)
 80004a0:	f001 fd67 	bl	8001f72 <HAL_GPIO_WritePin>
			  	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_3 , GPIO_PIN_RESET );
 80004a4:	2200      	movs	r2, #0
 80004a6:	2108      	movs	r1, #8
 80004a8:	489e      	ldr	r0, [pc, #632]	; (8000724 <display7SEG+0x31c>)
 80004aa:	f001 fd62 	bl	8001f72 <HAL_GPIO_WritePin>
			  	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_4 , GPIO_PIN_SET );
 80004ae:	2201      	movs	r2, #1
 80004b0:	2110      	movs	r1, #16
 80004b2:	489c      	ldr	r0, [pc, #624]	; (8000724 <display7SEG+0x31c>)
 80004b4:	f001 fd5d 	bl	8001f72 <HAL_GPIO_WritePin>
			  	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_5 , GPIO_PIN_SET );
 80004b8:	2201      	movs	r2, #1
 80004ba:	2120      	movs	r1, #32
 80004bc:	4899      	ldr	r0, [pc, #612]	; (8000724 <display7SEG+0x31c>)
 80004be:	f001 fd58 	bl	8001f72 <HAL_GPIO_WritePin>
			  	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_6 , GPIO_PIN_SET );
 80004c2:	2201      	movs	r2, #1
 80004c4:	2140      	movs	r1, #64	; 0x40
 80004c6:	4897      	ldr	r0, [pc, #604]	; (8000724 <display7SEG+0x31c>)
 80004c8:	f001 fd53 	bl	8001f72 <HAL_GPIO_WritePin>
			  	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_7 , GPIO_PIN_SET );
 80004cc:	2201      	movs	r2, #1
 80004ce:	2180      	movs	r1, #128	; 0x80
 80004d0:	4894      	ldr	r0, [pc, #592]	; (8000724 <display7SEG+0x31c>)
 80004d2:	f001 fd4e 	bl	8001f72 <HAL_GPIO_WritePin>
					break;
 80004d6:	e120      	b.n	800071a <display7SEG+0x312>
	}
	case 2  :{ HAL_GPIO_WritePin (GPIOA , GPIO_PIN_1 , GPIO_PIN_RESET );
 80004d8:	2200      	movs	r2, #0
 80004da:	2102      	movs	r1, #2
 80004dc:	4891      	ldr	r0, [pc, #580]	; (8000724 <display7SEG+0x31c>)
 80004de:	f001 fd48 	bl	8001f72 <HAL_GPIO_WritePin>
	  	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_2 , GPIO_PIN_RESET );
 80004e2:	2200      	movs	r2, #0
 80004e4:	2104      	movs	r1, #4
 80004e6:	488f      	ldr	r0, [pc, #572]	; (8000724 <display7SEG+0x31c>)
 80004e8:	f001 fd43 	bl	8001f72 <HAL_GPIO_WritePin>
	  	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_3 , GPIO_PIN_SET );
 80004ec:	2201      	movs	r2, #1
 80004ee:	2108      	movs	r1, #8
 80004f0:	488c      	ldr	r0, [pc, #560]	; (8000724 <display7SEG+0x31c>)
 80004f2:	f001 fd3e 	bl	8001f72 <HAL_GPIO_WritePin>
	  	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_4 , GPIO_PIN_RESET );
 80004f6:	2200      	movs	r2, #0
 80004f8:	2110      	movs	r1, #16
 80004fa:	488a      	ldr	r0, [pc, #552]	; (8000724 <display7SEG+0x31c>)
 80004fc:	f001 fd39 	bl	8001f72 <HAL_GPIO_WritePin>
	  	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_5 , GPIO_PIN_RESET );
 8000500:	2200      	movs	r2, #0
 8000502:	2120      	movs	r1, #32
 8000504:	4887      	ldr	r0, [pc, #540]	; (8000724 <display7SEG+0x31c>)
 8000506:	f001 fd34 	bl	8001f72 <HAL_GPIO_WritePin>
	  	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_6 , GPIO_PIN_SET );
 800050a:	2201      	movs	r2, #1
 800050c:	2140      	movs	r1, #64	; 0x40
 800050e:	4885      	ldr	r0, [pc, #532]	; (8000724 <display7SEG+0x31c>)
 8000510:	f001 fd2f 	bl	8001f72 <HAL_GPIO_WritePin>
	  	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_7 , GPIO_PIN_RESET );
 8000514:	2200      	movs	r2, #0
 8000516:	2180      	movs	r1, #128	; 0x80
 8000518:	4882      	ldr	r0, [pc, #520]	; (8000724 <display7SEG+0x31c>)
 800051a:	f001 fd2a 	bl	8001f72 <HAL_GPIO_WritePin>
	  			break;}
 800051e:	e0fc      	b.n	800071a <display7SEG+0x312>
	case 3 :{
		 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_1 , GPIO_PIN_RESET );
 8000520:	2200      	movs	r2, #0
 8000522:	2102      	movs	r1, #2
 8000524:	487f      	ldr	r0, [pc, #508]	; (8000724 <display7SEG+0x31c>)
 8000526:	f001 fd24 	bl	8001f72 <HAL_GPIO_WritePin>
		  	  	 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_2 , GPIO_PIN_RESET );
 800052a:	2200      	movs	r2, #0
 800052c:	2104      	movs	r1, #4
 800052e:	487d      	ldr	r0, [pc, #500]	; (8000724 <display7SEG+0x31c>)
 8000530:	f001 fd1f 	bl	8001f72 <HAL_GPIO_WritePin>
		  	  	 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_3 , GPIO_PIN_RESET );
 8000534:	2200      	movs	r2, #0
 8000536:	2108      	movs	r1, #8
 8000538:	487a      	ldr	r0, [pc, #488]	; (8000724 <display7SEG+0x31c>)
 800053a:	f001 fd1a 	bl	8001f72 <HAL_GPIO_WritePin>
		  	  	 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_4 , GPIO_PIN_RESET );
 800053e:	2200      	movs	r2, #0
 8000540:	2110      	movs	r1, #16
 8000542:	4878      	ldr	r0, [pc, #480]	; (8000724 <display7SEG+0x31c>)
 8000544:	f001 fd15 	bl	8001f72 <HAL_GPIO_WritePin>
		  	  	 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_5 , GPIO_PIN_SET );
 8000548:	2201      	movs	r2, #1
 800054a:	2120      	movs	r1, #32
 800054c:	4875      	ldr	r0, [pc, #468]	; (8000724 <display7SEG+0x31c>)
 800054e:	f001 fd10 	bl	8001f72 <HAL_GPIO_WritePin>
		  	  	 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_6 , GPIO_PIN_SET );
 8000552:	2201      	movs	r2, #1
 8000554:	2140      	movs	r1, #64	; 0x40
 8000556:	4873      	ldr	r0, [pc, #460]	; (8000724 <display7SEG+0x31c>)
 8000558:	f001 fd0b 	bl	8001f72 <HAL_GPIO_WritePin>
		  	  	 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_7 , GPIO_PIN_RESET );
 800055c:	2200      	movs	r2, #0
 800055e:	2180      	movs	r1, #128	; 0x80
 8000560:	4870      	ldr	r0, [pc, #448]	; (8000724 <display7SEG+0x31c>)
 8000562:	f001 fd06 	bl	8001f72 <HAL_GPIO_WritePin>
		  	  		break;}
 8000566:	e0d8      	b.n	800071a <display7SEG+0x312>
	case 4  :{
		HAL_GPIO_WritePin (GPIOA , GPIO_PIN_1 , GPIO_PIN_SET );
 8000568:	2201      	movs	r2, #1
 800056a:	2102      	movs	r1, #2
 800056c:	486d      	ldr	r0, [pc, #436]	; (8000724 <display7SEG+0x31c>)
 800056e:	f001 fd00 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 		 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_2 , GPIO_PIN_RESET );
 8000572:	2200      	movs	r2, #0
 8000574:	2104      	movs	r1, #4
 8000576:	486b      	ldr	r0, [pc, #428]	; (8000724 <display7SEG+0x31c>)
 8000578:	f001 fcfb 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 		 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_3 , GPIO_PIN_RESET );
 800057c:	2200      	movs	r2, #0
 800057e:	2108      	movs	r1, #8
 8000580:	4868      	ldr	r0, [pc, #416]	; (8000724 <display7SEG+0x31c>)
 8000582:	f001 fcf6 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 		 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_4 , GPIO_PIN_SET );
 8000586:	2201      	movs	r2, #1
 8000588:	2110      	movs	r1, #16
 800058a:	4866      	ldr	r0, [pc, #408]	; (8000724 <display7SEG+0x31c>)
 800058c:	f001 fcf1 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 		 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_5 , GPIO_PIN_SET );
 8000590:	2201      	movs	r2, #1
 8000592:	2120      	movs	r1, #32
 8000594:	4863      	ldr	r0, [pc, #396]	; (8000724 <display7SEG+0x31c>)
 8000596:	f001 fcec 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 		 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_6 , GPIO_PIN_RESET );
 800059a:	2200      	movs	r2, #0
 800059c:	2140      	movs	r1, #64	; 0x40
 800059e:	4861      	ldr	r0, [pc, #388]	; (8000724 <display7SEG+0x31c>)
 80005a0:	f001 fce7 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 		 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_7 , GPIO_PIN_RESET );
 80005a4:	2200      	movs	r2, #0
 80005a6:	2180      	movs	r1, #128	; 0x80
 80005a8:	485e      	ldr	r0, [pc, #376]	; (8000724 <display7SEG+0x31c>)
 80005aa:	f001 fce2 	bl	8001f72 <HAL_GPIO_WritePin>
		break;}
 80005ae:	e0b4      	b.n	800071a <display7SEG+0x312>
	case 5  :{
		 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_1 , GPIO_PIN_RESET );
 80005b0:	2200      	movs	r2, #0
 80005b2:	2102      	movs	r1, #2
 80005b4:	485b      	ldr	r0, [pc, #364]	; (8000724 <display7SEG+0x31c>)
 80005b6:	f001 fcdc 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  		 		 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_2 , GPIO_PIN_SET );
 80005ba:	2201      	movs	r2, #1
 80005bc:	2104      	movs	r1, #4
 80005be:	4859      	ldr	r0, [pc, #356]	; (8000724 <display7SEG+0x31c>)
 80005c0:	f001 fcd7 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  		 		 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_3 , GPIO_PIN_RESET );
 80005c4:	2200      	movs	r2, #0
 80005c6:	2108      	movs	r1, #8
 80005c8:	4856      	ldr	r0, [pc, #344]	; (8000724 <display7SEG+0x31c>)
 80005ca:	f001 fcd2 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  		 		 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_4 , GPIO_PIN_RESET );
 80005ce:	2200      	movs	r2, #0
 80005d0:	2110      	movs	r1, #16
 80005d2:	4854      	ldr	r0, [pc, #336]	; (8000724 <display7SEG+0x31c>)
 80005d4:	f001 fccd 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  		 		 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_5 , GPIO_PIN_SET );
 80005d8:	2201      	movs	r2, #1
 80005da:	2120      	movs	r1, #32
 80005dc:	4851      	ldr	r0, [pc, #324]	; (8000724 <display7SEG+0x31c>)
 80005de:	f001 fcc8 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  		 		 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_6 , GPIO_PIN_RESET );
 80005e2:	2200      	movs	r2, #0
 80005e4:	2140      	movs	r1, #64	; 0x40
 80005e6:	484f      	ldr	r0, [pc, #316]	; (8000724 <display7SEG+0x31c>)
 80005e8:	f001 fcc3 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  		 		 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_7 , GPIO_PIN_RESET );
 80005ec:	2200      	movs	r2, #0
 80005ee:	2180      	movs	r1, #128	; 0x80
 80005f0:	484c      	ldr	r0, [pc, #304]	; (8000724 <display7SEG+0x31c>)
 80005f2:	f001 fcbe 	bl	8001f72 <HAL_GPIO_WritePin>


		break;}
 80005f6:	e090      	b.n	800071a <display7SEG+0x312>
	case 6  :{
		 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_1 , GPIO_PIN_RESET );
 80005f8:	2200      	movs	r2, #0
 80005fa:	2102      	movs	r1, #2
 80005fc:	4849      	ldr	r0, [pc, #292]	; (8000724 <display7SEG+0x31c>)
 80005fe:	f001 fcb8 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_2 , GPIO_PIN_SET );
 8000602:	2201      	movs	r2, #1
 8000604:	2104      	movs	r1, #4
 8000606:	4847      	ldr	r0, [pc, #284]	; (8000724 <display7SEG+0x31c>)
 8000608:	f001 fcb3 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 	HAL_GPIO_WritePin (GPIOA , GPIO_PIN_3 , GPIO_PIN_RESET );
 800060c:	2200      	movs	r2, #0
 800060e:	2108      	movs	r1, #8
 8000610:	4844      	ldr	r0, [pc, #272]	; (8000724 <display7SEG+0x31c>)
 8000612:	f001 fcae 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 		 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_4 , GPIO_PIN_RESET );
 8000616:	2200      	movs	r2, #0
 8000618:	2110      	movs	r1, #16
 800061a:	4842      	ldr	r0, [pc, #264]	; (8000724 <display7SEG+0x31c>)
 800061c:	f001 fca9 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 		 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_5 , GPIO_PIN_RESET );
 8000620:	2200      	movs	r2, #0
 8000622:	2120      	movs	r1, #32
 8000624:	483f      	ldr	r0, [pc, #252]	; (8000724 <display7SEG+0x31c>)
 8000626:	f001 fca4 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 		 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_6 , GPIO_PIN_RESET );
 800062a:	2200      	movs	r2, #0
 800062c:	2140      	movs	r1, #64	; 0x40
 800062e:	483d      	ldr	r0, [pc, #244]	; (8000724 <display7SEG+0x31c>)
 8000630:	f001 fc9f 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 		 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_7 , GPIO_PIN_RESET );
 8000634:	2200      	movs	r2, #0
 8000636:	2180      	movs	r1, #128	; 0x80
 8000638:	483a      	ldr	r0, [pc, #232]	; (8000724 <display7SEG+0x31c>)
 800063a:	f001 fc9a 	bl	8001f72 <HAL_GPIO_WritePin>

		break;}
 800063e:	e06c      	b.n	800071a <display7SEG+0x312>
	case 7  :{
		 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_1 , GPIO_PIN_RESET );
 8000640:	2200      	movs	r2, #0
 8000642:	2102      	movs	r1, #2
 8000644:	4837      	ldr	r0, [pc, #220]	; (8000724 <display7SEG+0x31c>)
 8000646:	f001 fc94 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 			 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_2 , GPIO_PIN_RESET );
 800064a:	2200      	movs	r2, #0
 800064c:	2104      	movs	r1, #4
 800064e:	4835      	ldr	r0, [pc, #212]	; (8000724 <display7SEG+0x31c>)
 8000650:	f001 fc8f 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 			 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_3 , GPIO_PIN_RESET );
 8000654:	2200      	movs	r2, #0
 8000656:	2108      	movs	r1, #8
 8000658:	4832      	ldr	r0, [pc, #200]	; (8000724 <display7SEG+0x31c>)
 800065a:	f001 fc8a 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 			 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_4 , GPIO_PIN_SET );
 800065e:	2201      	movs	r2, #1
 8000660:	2110      	movs	r1, #16
 8000662:	4830      	ldr	r0, [pc, #192]	; (8000724 <display7SEG+0x31c>)
 8000664:	f001 fc85 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 			 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_5 , GPIO_PIN_SET );
 8000668:	2201      	movs	r2, #1
 800066a:	2120      	movs	r1, #32
 800066c:	482d      	ldr	r0, [pc, #180]	; (8000724 <display7SEG+0x31c>)
 800066e:	f001 fc80 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 			 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_6 , GPIO_PIN_SET );
 8000672:	2201      	movs	r2, #1
 8000674:	2140      	movs	r1, #64	; 0x40
 8000676:	482b      	ldr	r0, [pc, #172]	; (8000724 <display7SEG+0x31c>)
 8000678:	f001 fc7b 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 			 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_7 , GPIO_PIN_SET );
 800067c:	2201      	movs	r2, #1
 800067e:	2180      	movs	r1, #128	; 0x80
 8000680:	4828      	ldr	r0, [pc, #160]	; (8000724 <display7SEG+0x31c>)
 8000682:	f001 fc76 	bl	8001f72 <HAL_GPIO_WritePin>

		break;}
 8000686:	e048      	b.n	800071a <display7SEG+0x312>
	case 8  :{
		 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_1 , GPIO_PIN_RESET );
 8000688:	2200      	movs	r2, #0
 800068a:	2102      	movs	r1, #2
 800068c:	4825      	ldr	r0, [pc, #148]	; (8000724 <display7SEG+0x31c>)
 800068e:	f001 fc70 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 				 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_2 , GPIO_PIN_RESET );
 8000692:	2200      	movs	r2, #0
 8000694:	2104      	movs	r1, #4
 8000696:	4823      	ldr	r0, [pc, #140]	; (8000724 <display7SEG+0x31c>)
 8000698:	f001 fc6b 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 				 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_3 , GPIO_PIN_RESET );
 800069c:	2200      	movs	r2, #0
 800069e:	2108      	movs	r1, #8
 80006a0:	4820      	ldr	r0, [pc, #128]	; (8000724 <display7SEG+0x31c>)
 80006a2:	f001 fc66 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 				 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_4 , GPIO_PIN_RESET );
 80006a6:	2200      	movs	r2, #0
 80006a8:	2110      	movs	r1, #16
 80006aa:	481e      	ldr	r0, [pc, #120]	; (8000724 <display7SEG+0x31c>)
 80006ac:	f001 fc61 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 				 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_5 , GPIO_PIN_RESET );
 80006b0:	2200      	movs	r2, #0
 80006b2:	2120      	movs	r1, #32
 80006b4:	481b      	ldr	r0, [pc, #108]	; (8000724 <display7SEG+0x31c>)
 80006b6:	f001 fc5c 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 				 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_6 , GPIO_PIN_RESET );
 80006ba:	2200      	movs	r2, #0
 80006bc:	2140      	movs	r1, #64	; 0x40
 80006be:	4819      	ldr	r0, [pc, #100]	; (8000724 <display7SEG+0x31c>)
 80006c0:	f001 fc57 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 				 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_7 , GPIO_PIN_RESET );
 80006c4:	2200      	movs	r2, #0
 80006c6:	2180      	movs	r1, #128	; 0x80
 80006c8:	4816      	ldr	r0, [pc, #88]	; (8000724 <display7SEG+0x31c>)
 80006ca:	f001 fc52 	bl	8001f72 <HAL_GPIO_WritePin>

		break;}
 80006ce:	e024      	b.n	800071a <display7SEG+0x312>
	case 9 :{
		 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_1 , GPIO_PIN_RESET );
 80006d0:	2200      	movs	r2, #0
 80006d2:	2102      	movs	r1, #2
 80006d4:	4813      	ldr	r0, [pc, #76]	; (8000724 <display7SEG+0x31c>)
 80006d6:	f001 fc4c 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 					 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_2 , GPIO_PIN_RESET );
 80006da:	2200      	movs	r2, #0
 80006dc:	2104      	movs	r1, #4
 80006de:	4811      	ldr	r0, [pc, #68]	; (8000724 <display7SEG+0x31c>)
 80006e0:	f001 fc47 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 					 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_3 , GPIO_PIN_RESET );
 80006e4:	2200      	movs	r2, #0
 80006e6:	2108      	movs	r1, #8
 80006e8:	480e      	ldr	r0, [pc, #56]	; (8000724 <display7SEG+0x31c>)
 80006ea:	f001 fc42 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 					 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_4 , GPIO_PIN_RESET );
 80006ee:	2200      	movs	r2, #0
 80006f0:	2110      	movs	r1, #16
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <display7SEG+0x31c>)
 80006f4:	f001 fc3d 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 					 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_5 , GPIO_PIN_SET );
 80006f8:	2201      	movs	r2, #1
 80006fa:	2120      	movs	r1, #32
 80006fc:	4809      	ldr	r0, [pc, #36]	; (8000724 <display7SEG+0x31c>)
 80006fe:	f001 fc38 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 					 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_6 , GPIO_PIN_RESET );
 8000702:	2200      	movs	r2, #0
 8000704:	2140      	movs	r1, #64	; 0x40
 8000706:	4807      	ldr	r0, [pc, #28]	; (8000724 <display7SEG+0x31c>)
 8000708:	f001 fc33 	bl	8001f72 <HAL_GPIO_WritePin>
			  	  	 					 	 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_7 , GPIO_PIN_RESET );
 800070c:	2200      	movs	r2, #0
 800070e:	2180      	movs	r1, #128	; 0x80
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <display7SEG+0x31c>)
 8000712:	f001 fc2e 	bl	8001f72 <HAL_GPIO_WritePin>


			  	  	 					 break;}
 8000716:	e000      	b.n	800071a <display7SEG+0x312>
	default :{break;}
 8000718:	bf00      	nop

	}
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40010800 	.word	0x40010800

08000728 <fsm_auto_run>:
#include "software_timer.h"
#include "button.h"
#include "main.h"
#include "global.h"

void fsm_auto_run(){
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	switch(status){
 800072c:	4b93      	ldr	r3, [pc, #588]	; (800097c <fsm_auto_run+0x254>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b13      	cmp	r3, #19
 8000732:	f200 821a 	bhi.w	8000b6a <fsm_auto_run+0x442>
 8000736:	a201      	add	r2, pc, #4	; (adr r2, 800073c <fsm_auto_run+0x14>)
 8000738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800073c:	0800078d 	.word	0x0800078d
 8000740:	08000b6b 	.word	0x08000b6b
 8000744:	08000b6b 	.word	0x08000b6b
 8000748:	08000b6b 	.word	0x08000b6b
 800074c:	08000b6b 	.word	0x08000b6b
 8000750:	08000b6b 	.word	0x08000b6b
 8000754:	08000b6b 	.word	0x08000b6b
 8000758:	08000b6b 	.word	0x08000b6b
 800075c:	08000b6b 	.word	0x08000b6b
 8000760:	08000b6b 	.word	0x08000b6b
 8000764:	080007a1 	.word	0x080007a1
 8000768:	080007fb 	.word	0x080007fb
 800076c:	0800085b 	.word	0x0800085b
 8000770:	080008bb 	.word	0x080008bb
 8000774:	0800091b 	.word	0x0800091b
 8000778:	08000991 	.word	0x08000991
 800077c:	080009f1 	.word	0x080009f1
 8000780:	08000a51 	.word	0x08000a51
 8000784:	08000aaf 	.word	0x08000aaf
 8000788:	08000b0d 	.word	0x08000b0d
	case INIT:
		display7SEG(0);
 800078c:	2000      	movs	r0, #0
 800078e:	f7ff fe3b 	bl	8000408 <display7SEG>
		status = BUT0;
 8000792:	4b7a      	ldr	r3, [pc, #488]	; (800097c <fsm_auto_run+0x254>)
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
		setTimer2(200);
 8000798:	20c8      	movs	r0, #200	; 0xc8
 800079a:	f000 ffdb 	bl	8001754 <setTimer2>
		break;
 800079e:	e1f9      	b.n	8000b94 <fsm_auto_run+0x46c>

	case AUTO_0:
		display7SEG(0);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff fe31 	bl	8000408 <display7SEG>
		if(timer2_flag == 1){
 80007a6:	4b76      	ldr	r3, [pc, #472]	; (8000980 <fsm_auto_run+0x258>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d105      	bne.n	80007ba <fsm_auto_run+0x92>
			timer2_flag = 0;
 80007ae:	4b74      	ldr	r3, [pc, #464]	; (8000980 <fsm_auto_run+0x258>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
			setTimer2(100);
 80007b4:	2064      	movs	r0, #100	; 0x64
 80007b6:	f000 ffcd 	bl	8001754 <setTimer2>
		}
		if(INC_flag == 1){
 80007ba:	4b72      	ldr	r3, [pc, #456]	; (8000984 <fsm_auto_run+0x25c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d105      	bne.n	80007ce <fsm_auto_run+0xa6>
			INC_flag = 0;
 80007c2:	4b70      	ldr	r3, [pc, #448]	; (8000984 <fsm_auto_run+0x25c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
			status = BUT1;
 80007c8:	4b6c      	ldr	r3, [pc, #432]	; (800097c <fsm_auto_run+0x254>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	601a      	str	r2, [r3, #0]
		}
		if(RESET_flag == 1){
 80007ce:	4b6e      	ldr	r3, [pc, #440]	; (8000988 <fsm_auto_run+0x260>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d105      	bne.n	80007e2 <fsm_auto_run+0xba>
			RESET_flag = 0;
 80007d6:	4b6c      	ldr	r3, [pc, #432]	; (8000988 <fsm_auto_run+0x260>)
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
			status = BUT0;
 80007dc:	4b67      	ldr	r3, [pc, #412]	; (800097c <fsm_auto_run+0x254>)
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
		}
		if(DEC_flag == 1){
 80007e2:	4b6a      	ldr	r3, [pc, #424]	; (800098c <fsm_auto_run+0x264>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	f040 81c1 	bne.w	8000b6e <fsm_auto_run+0x446>
			DEC_flag = 0;
 80007ec:	4b67      	ldr	r3, [pc, #412]	; (800098c <fsm_auto_run+0x264>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
			status = BUT9;
 80007f2:	4b62      	ldr	r3, [pc, #392]	; (800097c <fsm_auto_run+0x254>)
 80007f4:	2209      	movs	r2, #9
 80007f6:	601a      	str	r2, [r3, #0]
		}
		break;
 80007f8:	e1b9      	b.n	8000b6e <fsm_auto_run+0x446>
	case AUTO_1:
		display7SEG(1);
 80007fa:	2001      	movs	r0, #1
 80007fc:	f7ff fe04 	bl	8000408 <display7SEG>
		if(timer2_flag == 1){
 8000800:	4b5f      	ldr	r3, [pc, #380]	; (8000980 <fsm_auto_run+0x258>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d108      	bne.n	800081a <fsm_auto_run+0xf2>
			timer2_flag = 0;
 8000808:	4b5d      	ldr	r3, [pc, #372]	; (8000980 <fsm_auto_run+0x258>)
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
			status = AUTO_0;
 800080e:	4b5b      	ldr	r3, [pc, #364]	; (800097c <fsm_auto_run+0x254>)
 8000810:	220a      	movs	r2, #10
 8000812:	601a      	str	r2, [r3, #0]
			setTimer2(100);
 8000814:	2064      	movs	r0, #100	; 0x64
 8000816:	f000 ff9d 	bl	8001754 <setTimer2>
		}
		if(INC_flag == 1){
 800081a:	4b5a      	ldr	r3, [pc, #360]	; (8000984 <fsm_auto_run+0x25c>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d105      	bne.n	800082e <fsm_auto_run+0x106>
			INC_flag = 0;
 8000822:	4b58      	ldr	r3, [pc, #352]	; (8000984 <fsm_auto_run+0x25c>)
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
			status = BUT2;
 8000828:	4b54      	ldr	r3, [pc, #336]	; (800097c <fsm_auto_run+0x254>)
 800082a:	2202      	movs	r2, #2
 800082c:	601a      	str	r2, [r3, #0]
		}
		if(RESET_flag == 1){
 800082e:	4b56      	ldr	r3, [pc, #344]	; (8000988 <fsm_auto_run+0x260>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d105      	bne.n	8000842 <fsm_auto_run+0x11a>
			RESET_flag = 0;
 8000836:	4b54      	ldr	r3, [pc, #336]	; (8000988 <fsm_auto_run+0x260>)
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
			status = BUT0;
 800083c:	4b4f      	ldr	r3, [pc, #316]	; (800097c <fsm_auto_run+0x254>)
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
		}
		if(DEC_flag == 1){
 8000842:	4b52      	ldr	r3, [pc, #328]	; (800098c <fsm_auto_run+0x264>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b01      	cmp	r3, #1
 8000848:	f040 8193 	bne.w	8000b72 <fsm_auto_run+0x44a>
			DEC_flag = 0;
 800084c:	4b4f      	ldr	r3, [pc, #316]	; (800098c <fsm_auto_run+0x264>)
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
			status = BUT1;
 8000852:	4b4a      	ldr	r3, [pc, #296]	; (800097c <fsm_auto_run+0x254>)
 8000854:	2201      	movs	r2, #1
 8000856:	601a      	str	r2, [r3, #0]
		}
		break;
 8000858:	e18b      	b.n	8000b72 <fsm_auto_run+0x44a>
	case AUTO_2:
		display7SEG(2);
 800085a:	2002      	movs	r0, #2
 800085c:	f7ff fdd4 	bl	8000408 <display7SEG>
		if(timer2_flag == 1){
 8000860:	4b47      	ldr	r3, [pc, #284]	; (8000980 <fsm_auto_run+0x258>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d108      	bne.n	800087a <fsm_auto_run+0x152>
			timer2_flag = 0;
 8000868:	4b45      	ldr	r3, [pc, #276]	; (8000980 <fsm_auto_run+0x258>)
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
			status = AUTO_1;
 800086e:	4b43      	ldr	r3, [pc, #268]	; (800097c <fsm_auto_run+0x254>)
 8000870:	220b      	movs	r2, #11
 8000872:	601a      	str	r2, [r3, #0]
			setTimer2(100);
 8000874:	2064      	movs	r0, #100	; 0x64
 8000876:	f000 ff6d 	bl	8001754 <setTimer2>
		}
		if(INC_flag == 1){
 800087a:	4b42      	ldr	r3, [pc, #264]	; (8000984 <fsm_auto_run+0x25c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d105      	bne.n	800088e <fsm_auto_run+0x166>
			INC_flag = 0;
 8000882:	4b40      	ldr	r3, [pc, #256]	; (8000984 <fsm_auto_run+0x25c>)
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
			status = BUT3;
 8000888:	4b3c      	ldr	r3, [pc, #240]	; (800097c <fsm_auto_run+0x254>)
 800088a:	2203      	movs	r2, #3
 800088c:	601a      	str	r2, [r3, #0]
		}
		if(RESET_flag == 1){
 800088e:	4b3e      	ldr	r3, [pc, #248]	; (8000988 <fsm_auto_run+0x260>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d105      	bne.n	80008a2 <fsm_auto_run+0x17a>
			RESET_flag = 0;
 8000896:	4b3c      	ldr	r3, [pc, #240]	; (8000988 <fsm_auto_run+0x260>)
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
			status = BUT0;
 800089c:	4b37      	ldr	r3, [pc, #220]	; (800097c <fsm_auto_run+0x254>)
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
		}
		if(DEC_flag == 1){
 80008a2:	4b3a      	ldr	r3, [pc, #232]	; (800098c <fsm_auto_run+0x264>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	f040 8165 	bne.w	8000b76 <fsm_auto_run+0x44e>
			DEC_flag = 0;
 80008ac:	4b37      	ldr	r3, [pc, #220]	; (800098c <fsm_auto_run+0x264>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
			status = BUT1;
 80008b2:	4b32      	ldr	r3, [pc, #200]	; (800097c <fsm_auto_run+0x254>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	601a      	str	r2, [r3, #0]
		}
		break;
 80008b8:	e15d      	b.n	8000b76 <fsm_auto_run+0x44e>
	case AUTO_3:
		display7SEG(3);
 80008ba:	2003      	movs	r0, #3
 80008bc:	f7ff fda4 	bl	8000408 <display7SEG>
		if(timer2_flag == 1){
 80008c0:	4b2f      	ldr	r3, [pc, #188]	; (8000980 <fsm_auto_run+0x258>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d108      	bne.n	80008da <fsm_auto_run+0x1b2>
			timer2_flag = 0;
 80008c8:	4b2d      	ldr	r3, [pc, #180]	; (8000980 <fsm_auto_run+0x258>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
			status = AUTO_2;
 80008ce:	4b2b      	ldr	r3, [pc, #172]	; (800097c <fsm_auto_run+0x254>)
 80008d0:	220c      	movs	r2, #12
 80008d2:	601a      	str	r2, [r3, #0]
			setTimer2(100);
 80008d4:	2064      	movs	r0, #100	; 0x64
 80008d6:	f000 ff3d 	bl	8001754 <setTimer2>
		}
		if(INC_flag == 1){
 80008da:	4b2a      	ldr	r3, [pc, #168]	; (8000984 <fsm_auto_run+0x25c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d105      	bne.n	80008ee <fsm_auto_run+0x1c6>
			INC_flag = 0;
 80008e2:	4b28      	ldr	r3, [pc, #160]	; (8000984 <fsm_auto_run+0x25c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
			status = BUT4;
 80008e8:	4b24      	ldr	r3, [pc, #144]	; (800097c <fsm_auto_run+0x254>)
 80008ea:	2204      	movs	r2, #4
 80008ec:	601a      	str	r2, [r3, #0]
		}
		if(RESET_flag == 1){
 80008ee:	4b26      	ldr	r3, [pc, #152]	; (8000988 <fsm_auto_run+0x260>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d105      	bne.n	8000902 <fsm_auto_run+0x1da>
			RESET_flag = 0;
 80008f6:	4b24      	ldr	r3, [pc, #144]	; (8000988 <fsm_auto_run+0x260>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
			status = BUT0;
 80008fc:	4b1f      	ldr	r3, [pc, #124]	; (800097c <fsm_auto_run+0x254>)
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
		}
		if(DEC_flag == 1){
 8000902:	4b22      	ldr	r3, [pc, #136]	; (800098c <fsm_auto_run+0x264>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b01      	cmp	r3, #1
 8000908:	f040 8137 	bne.w	8000b7a <fsm_auto_run+0x452>
			DEC_flag = 0;
 800090c:	4b1f      	ldr	r3, [pc, #124]	; (800098c <fsm_auto_run+0x264>)
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
			status = BUT2;
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <fsm_auto_run+0x254>)
 8000914:	2202      	movs	r2, #2
 8000916:	601a      	str	r2, [r3, #0]
		}
		break;
 8000918:	e12f      	b.n	8000b7a <fsm_auto_run+0x452>
	case AUTO_4:
		display7SEG(4);
 800091a:	2004      	movs	r0, #4
 800091c:	f7ff fd74 	bl	8000408 <display7SEG>
		if(timer2_flag == 1){
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <fsm_auto_run+0x258>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d108      	bne.n	800093a <fsm_auto_run+0x212>
			timer2_flag = 0;
 8000928:	4b15      	ldr	r3, [pc, #84]	; (8000980 <fsm_auto_run+0x258>)
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
			status = AUTO_3;
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <fsm_auto_run+0x254>)
 8000930:	220d      	movs	r2, #13
 8000932:	601a      	str	r2, [r3, #0]
			setTimer2(100);
 8000934:	2064      	movs	r0, #100	; 0x64
 8000936:	f000 ff0d 	bl	8001754 <setTimer2>
		}
		if(INC_flag == 1){
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <fsm_auto_run+0x25c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d105      	bne.n	800094e <fsm_auto_run+0x226>
			INC_flag = 0;
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <fsm_auto_run+0x25c>)
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
			status = BUT5;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <fsm_auto_run+0x254>)
 800094a:	2205      	movs	r2, #5
 800094c:	601a      	str	r2, [r3, #0]
		}
		if(RESET_flag == 1){
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <fsm_auto_run+0x260>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d105      	bne.n	8000962 <fsm_auto_run+0x23a>
			RESET_flag = 0;
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <fsm_auto_run+0x260>)
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
			status = BUT0;
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <fsm_auto_run+0x254>)
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
		}
		if(DEC_flag == 1){
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <fsm_auto_run+0x264>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b01      	cmp	r3, #1
 8000968:	f040 8109 	bne.w	8000b7e <fsm_auto_run+0x456>
			DEC_flag = 0;
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <fsm_auto_run+0x264>)
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
			status = BUT3;
 8000972:	4b02      	ldr	r3, [pc, #8]	; (800097c <fsm_auto_run+0x254>)
 8000974:	2203      	movs	r2, #3
 8000976:	601a      	str	r2, [r3, #0]
		}
		break;
 8000978:	e101      	b.n	8000b7e <fsm_auto_run+0x456>
 800097a:	bf00      	nop
 800097c:	20000070 	.word	0x20000070
 8000980:	20000088 	.word	0x20000088
 8000984:	20000060 	.word	0x20000060
 8000988:	2000005c 	.word	0x2000005c
 800098c:	20000068 	.word	0x20000068
	case AUTO_5:
		display7SEG(5);
 8000990:	2005      	movs	r0, #5
 8000992:	f7ff fd39 	bl	8000408 <display7SEG>
		if(timer2_flag == 1){
 8000996:	4b80      	ldr	r3, [pc, #512]	; (8000b98 <fsm_auto_run+0x470>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d108      	bne.n	80009b0 <fsm_auto_run+0x288>
			timer2_flag = 0;
 800099e:	4b7e      	ldr	r3, [pc, #504]	; (8000b98 <fsm_auto_run+0x470>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
			status = AUTO_4;
 80009a4:	4b7d      	ldr	r3, [pc, #500]	; (8000b9c <fsm_auto_run+0x474>)
 80009a6:	220e      	movs	r2, #14
 80009a8:	601a      	str	r2, [r3, #0]
			setTimer2(100);
 80009aa:	2064      	movs	r0, #100	; 0x64
 80009ac:	f000 fed2 	bl	8001754 <setTimer2>
		}
		if(INC_flag == 1){
 80009b0:	4b7b      	ldr	r3, [pc, #492]	; (8000ba0 <fsm_auto_run+0x478>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d105      	bne.n	80009c4 <fsm_auto_run+0x29c>
			INC_flag = 0;
 80009b8:	4b79      	ldr	r3, [pc, #484]	; (8000ba0 <fsm_auto_run+0x478>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
			status = BUT6;
 80009be:	4b77      	ldr	r3, [pc, #476]	; (8000b9c <fsm_auto_run+0x474>)
 80009c0:	2206      	movs	r2, #6
 80009c2:	601a      	str	r2, [r3, #0]
		}
		if(RESET_flag == 1){
 80009c4:	4b77      	ldr	r3, [pc, #476]	; (8000ba4 <fsm_auto_run+0x47c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d105      	bne.n	80009d8 <fsm_auto_run+0x2b0>
			RESET_flag = 0;
 80009cc:	4b75      	ldr	r3, [pc, #468]	; (8000ba4 <fsm_auto_run+0x47c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
			status = BUT0;
 80009d2:	4b72      	ldr	r3, [pc, #456]	; (8000b9c <fsm_auto_run+0x474>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
		}
		if(DEC_flag == 1){
 80009d8:	4b73      	ldr	r3, [pc, #460]	; (8000ba8 <fsm_auto_run+0x480>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	f040 80d0 	bne.w	8000b82 <fsm_auto_run+0x45a>
			DEC_flag = 0;
 80009e2:	4b71      	ldr	r3, [pc, #452]	; (8000ba8 <fsm_auto_run+0x480>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
			status = BUT4;
 80009e8:	4b6c      	ldr	r3, [pc, #432]	; (8000b9c <fsm_auto_run+0x474>)
 80009ea:	2204      	movs	r2, #4
 80009ec:	601a      	str	r2, [r3, #0]
		}
		break;
 80009ee:	e0c8      	b.n	8000b82 <fsm_auto_run+0x45a>
	case AUTO_6:
		display7SEG(6);
 80009f0:	2006      	movs	r0, #6
 80009f2:	f7ff fd09 	bl	8000408 <display7SEG>
		if(timer2_flag == 1){
 80009f6:	4b68      	ldr	r3, [pc, #416]	; (8000b98 <fsm_auto_run+0x470>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d108      	bne.n	8000a10 <fsm_auto_run+0x2e8>
			timer2_flag = 0;
 80009fe:	4b66      	ldr	r3, [pc, #408]	; (8000b98 <fsm_auto_run+0x470>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
			status = AUTO_5;
 8000a04:	4b65      	ldr	r3, [pc, #404]	; (8000b9c <fsm_auto_run+0x474>)
 8000a06:	220f      	movs	r2, #15
 8000a08:	601a      	str	r2, [r3, #0]
			setTimer2(100);
 8000a0a:	2064      	movs	r0, #100	; 0x64
 8000a0c:	f000 fea2 	bl	8001754 <setTimer2>
		}
		if(INC_flag == 1){
 8000a10:	4b63      	ldr	r3, [pc, #396]	; (8000ba0 <fsm_auto_run+0x478>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d105      	bne.n	8000a24 <fsm_auto_run+0x2fc>
			INC_flag = 0;
 8000a18:	4b61      	ldr	r3, [pc, #388]	; (8000ba0 <fsm_auto_run+0x478>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
			status = BUT7;
 8000a1e:	4b5f      	ldr	r3, [pc, #380]	; (8000b9c <fsm_auto_run+0x474>)
 8000a20:	2207      	movs	r2, #7
 8000a22:	601a      	str	r2, [r3, #0]
		}
		if(RESET_flag == 1){
 8000a24:	4b5f      	ldr	r3, [pc, #380]	; (8000ba4 <fsm_auto_run+0x47c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d105      	bne.n	8000a38 <fsm_auto_run+0x310>
			RESET_flag = 0;
 8000a2c:	4b5d      	ldr	r3, [pc, #372]	; (8000ba4 <fsm_auto_run+0x47c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
			status = BUT0;
 8000a32:	4b5a      	ldr	r3, [pc, #360]	; (8000b9c <fsm_auto_run+0x474>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
		}
		if(DEC_flag == 1){
 8000a38:	4b5b      	ldr	r3, [pc, #364]	; (8000ba8 <fsm_auto_run+0x480>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	f040 80a2 	bne.w	8000b86 <fsm_auto_run+0x45e>
			DEC_flag = 0;
 8000a42:	4b59      	ldr	r3, [pc, #356]	; (8000ba8 <fsm_auto_run+0x480>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
			status = BUT5;
 8000a48:	4b54      	ldr	r3, [pc, #336]	; (8000b9c <fsm_auto_run+0x474>)
 8000a4a:	2205      	movs	r2, #5
 8000a4c:	601a      	str	r2, [r3, #0]
		}
		break;
 8000a4e:	e09a      	b.n	8000b86 <fsm_auto_run+0x45e>
	case AUTO_7:
		display7SEG(7);
 8000a50:	2007      	movs	r0, #7
 8000a52:	f7ff fcd9 	bl	8000408 <display7SEG>
		if(timer2_flag == 1){
 8000a56:	4b50      	ldr	r3, [pc, #320]	; (8000b98 <fsm_auto_run+0x470>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d108      	bne.n	8000a70 <fsm_auto_run+0x348>
			timer2_flag = 0;
 8000a5e:	4b4e      	ldr	r3, [pc, #312]	; (8000b98 <fsm_auto_run+0x470>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
			status = AUTO_6;
 8000a64:	4b4d      	ldr	r3, [pc, #308]	; (8000b9c <fsm_auto_run+0x474>)
 8000a66:	2210      	movs	r2, #16
 8000a68:	601a      	str	r2, [r3, #0]
			setTimer2(100);
 8000a6a:	2064      	movs	r0, #100	; 0x64
 8000a6c:	f000 fe72 	bl	8001754 <setTimer2>
		}
		if(INC_flag == 1){
 8000a70:	4b4b      	ldr	r3, [pc, #300]	; (8000ba0 <fsm_auto_run+0x478>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d105      	bne.n	8000a84 <fsm_auto_run+0x35c>
			INC_flag = 0;
 8000a78:	4b49      	ldr	r3, [pc, #292]	; (8000ba0 <fsm_auto_run+0x478>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
			status = BUT8;
 8000a7e:	4b47      	ldr	r3, [pc, #284]	; (8000b9c <fsm_auto_run+0x474>)
 8000a80:	2208      	movs	r2, #8
 8000a82:	601a      	str	r2, [r3, #0]
		}
		if(RESET_flag == 1){
 8000a84:	4b47      	ldr	r3, [pc, #284]	; (8000ba4 <fsm_auto_run+0x47c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d105      	bne.n	8000a98 <fsm_auto_run+0x370>
			RESET_flag = 0;
 8000a8c:	4b45      	ldr	r3, [pc, #276]	; (8000ba4 <fsm_auto_run+0x47c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
			status = BUT0;
 8000a92:	4b42      	ldr	r3, [pc, #264]	; (8000b9c <fsm_auto_run+0x474>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
		}
		if(DEC_flag == 1){
 8000a98:	4b43      	ldr	r3, [pc, #268]	; (8000ba8 <fsm_auto_run+0x480>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d174      	bne.n	8000b8a <fsm_auto_run+0x462>
			DEC_flag = 0;
 8000aa0:	4b41      	ldr	r3, [pc, #260]	; (8000ba8 <fsm_auto_run+0x480>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
			status = BUT6;
 8000aa6:	4b3d      	ldr	r3, [pc, #244]	; (8000b9c <fsm_auto_run+0x474>)
 8000aa8:	2206      	movs	r2, #6
 8000aaa:	601a      	str	r2, [r3, #0]
		}
		break;
 8000aac:	e06d      	b.n	8000b8a <fsm_auto_run+0x462>
	case AUTO_8:
		display7SEG(8);
 8000aae:	2008      	movs	r0, #8
 8000ab0:	f7ff fcaa 	bl	8000408 <display7SEG>
		if(timer2_flag == 1){
 8000ab4:	4b38      	ldr	r3, [pc, #224]	; (8000b98 <fsm_auto_run+0x470>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d108      	bne.n	8000ace <fsm_auto_run+0x3a6>
			timer2_flag = 0;
 8000abc:	4b36      	ldr	r3, [pc, #216]	; (8000b98 <fsm_auto_run+0x470>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
			status = AUTO_7;
 8000ac2:	4b36      	ldr	r3, [pc, #216]	; (8000b9c <fsm_auto_run+0x474>)
 8000ac4:	2211      	movs	r2, #17
 8000ac6:	601a      	str	r2, [r3, #0]
			setTimer2(100);
 8000ac8:	2064      	movs	r0, #100	; 0x64
 8000aca:	f000 fe43 	bl	8001754 <setTimer2>
		}
		if(INC_flag == 1){
 8000ace:	4b34      	ldr	r3, [pc, #208]	; (8000ba0 <fsm_auto_run+0x478>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d105      	bne.n	8000ae2 <fsm_auto_run+0x3ba>
			INC_flag = 0;
 8000ad6:	4b32      	ldr	r3, [pc, #200]	; (8000ba0 <fsm_auto_run+0x478>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
			status = BUT9;
 8000adc:	4b2f      	ldr	r3, [pc, #188]	; (8000b9c <fsm_auto_run+0x474>)
 8000ade:	2209      	movs	r2, #9
 8000ae0:	601a      	str	r2, [r3, #0]
		}
		if(RESET_flag == 1){
 8000ae2:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <fsm_auto_run+0x47c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d105      	bne.n	8000af6 <fsm_auto_run+0x3ce>
			RESET_flag = 0;
 8000aea:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <fsm_auto_run+0x47c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
			status = BUT0;
 8000af0:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <fsm_auto_run+0x474>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
		}
		if(DEC_flag == 1){
 8000af6:	4b2c      	ldr	r3, [pc, #176]	; (8000ba8 <fsm_auto_run+0x480>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d147      	bne.n	8000b8e <fsm_auto_run+0x466>
			DEC_flag = 0;
 8000afe:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <fsm_auto_run+0x480>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
			status = BUT7;
 8000b04:	4b25      	ldr	r3, [pc, #148]	; (8000b9c <fsm_auto_run+0x474>)
 8000b06:	2207      	movs	r2, #7
 8000b08:	601a      	str	r2, [r3, #0]
		}
		break;
 8000b0a:	e040      	b.n	8000b8e <fsm_auto_run+0x466>
	case AUTO_9:
		display7SEG(9);
 8000b0c:	2009      	movs	r0, #9
 8000b0e:	f7ff fc7b 	bl	8000408 <display7SEG>
		if(timer2_flag == 1){
 8000b12:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <fsm_auto_run+0x470>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d108      	bne.n	8000b2c <fsm_auto_run+0x404>
			timer2_flag = 0;
 8000b1a:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <fsm_auto_run+0x470>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
			status = AUTO_8;
 8000b20:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <fsm_auto_run+0x474>)
 8000b22:	2212      	movs	r2, #18
 8000b24:	601a      	str	r2, [r3, #0]
			setTimer2(100);
 8000b26:	2064      	movs	r0, #100	; 0x64
 8000b28:	f000 fe14 	bl	8001754 <setTimer2>
		}
		if(INC_flag == 1){
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <fsm_auto_run+0x478>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d105      	bne.n	8000b40 <fsm_auto_run+0x418>
			INC_flag = 0;
 8000b34:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <fsm_auto_run+0x478>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
			status = BUT9;
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <fsm_auto_run+0x474>)
 8000b3c:	2209      	movs	r2, #9
 8000b3e:	601a      	str	r2, [r3, #0]
		}
		if(RESET_flag == 1){
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <fsm_auto_run+0x47c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d105      	bne.n	8000b54 <fsm_auto_run+0x42c>
			RESET_flag = 0;
 8000b48:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <fsm_auto_run+0x47c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
			status = BUT0;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <fsm_auto_run+0x474>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
		}
		if(DEC_flag == 1){
 8000b54:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <fsm_auto_run+0x480>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d11a      	bne.n	8000b92 <fsm_auto_run+0x46a>
			DEC_flag = 0;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <fsm_auto_run+0x480>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
			status = BUT8;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <fsm_auto_run+0x474>)
 8000b64:	2208      	movs	r2, #8
 8000b66:	601a      	str	r2, [r3, #0]
		}
		break;
 8000b68:	e013      	b.n	8000b92 <fsm_auto_run+0x46a>
	default:
		break;
 8000b6a:	bf00      	nop
 8000b6c:	e012      	b.n	8000b94 <fsm_auto_run+0x46c>
		break;
 8000b6e:	bf00      	nop
 8000b70:	e010      	b.n	8000b94 <fsm_auto_run+0x46c>
		break;
 8000b72:	bf00      	nop
 8000b74:	e00e      	b.n	8000b94 <fsm_auto_run+0x46c>
		break;
 8000b76:	bf00      	nop
 8000b78:	e00c      	b.n	8000b94 <fsm_auto_run+0x46c>
		break;
 8000b7a:	bf00      	nop
 8000b7c:	e00a      	b.n	8000b94 <fsm_auto_run+0x46c>
		break;
 8000b7e:	bf00      	nop
 8000b80:	e008      	b.n	8000b94 <fsm_auto_run+0x46c>
		break;
 8000b82:	bf00      	nop
 8000b84:	e006      	b.n	8000b94 <fsm_auto_run+0x46c>
		break;
 8000b86:	bf00      	nop
 8000b88:	e004      	b.n	8000b94 <fsm_auto_run+0x46c>
		break;
 8000b8a:	bf00      	nop
 8000b8c:	e002      	b.n	8000b94 <fsm_auto_run+0x46c>
		break;
 8000b8e:	bf00      	nop
 8000b90:	e000      	b.n	8000b94 <fsm_auto_run+0x46c>
		break;
 8000b92:	bf00      	nop
	}
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000088 	.word	0x20000088
 8000b9c:	20000070 	.word	0x20000070
 8000ba0:	20000060 	.word	0x20000060
 8000ba4:	2000005c 	.word	0x2000005c
 8000ba8:	20000068 	.word	0x20000068

08000bac <fsm_long_run>:
#include "fsm_auto.h"
#include "button.h"
#include "display7SEG.h"
#include "main.h"

void fsm_long_run(){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	switch (status){
 8000bb0:	4b97      	ldr	r3, [pc, #604]	; (8000e10 <fsm_long_run+0x264>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3b14      	subs	r3, #20
 8000bb6:	2b09      	cmp	r3, #9
 8000bb8:	f200 8112 	bhi.w	8000de0 <fsm_long_run+0x234>
 8000bbc:	a201      	add	r2, pc, #4	; (adr r2, 8000bc4 <fsm_long_run+0x18>)
 8000bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc2:	bf00      	nop
 8000bc4:	08000bed 	.word	0x08000bed
 8000bc8:	08000c21 	.word	0x08000c21
 8000bcc:	08000c55 	.word	0x08000c55
 8000bd0:	08000c89 	.word	0x08000c89
 8000bd4:	08000cbd 	.word	0x08000cbd
 8000bd8:	08000cf1 	.word	0x08000cf1
 8000bdc:	08000d21 	.word	0x08000d21
 8000be0:	08000d51 	.word	0x08000d51
 8000be4:	08000d81 	.word	0x08000d81
 8000be8:	08000db1 	.word	0x08000db1
	case LONG_0:
		display7SEG(0);
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fc0b 	bl	8000408 <display7SEG>
		if(timer1_flag == 1){
 8000bf2:	4b88      	ldr	r3, [pc, #544]	; (8000e14 <fsm_long_run+0x268>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	f040 80f4 	bne.w	8000de4 <fsm_long_run+0x238>
			timer1_flag = 0;
 8000bfc:	4b85      	ldr	r3, [pc, #532]	; (8000e14 <fsm_long_run+0x268>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
		if(INC_flag1 == 1){
 8000c02:	4b85      	ldr	r3, [pc, #532]	; (8000e18 <fsm_long_run+0x26c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	f040 80ec 	bne.w	8000de4 <fsm_long_run+0x238>
			INC_flag1 = 0;
 8000c0c:	4b82      	ldr	r3, [pc, #520]	; (8000e18 <fsm_long_run+0x26c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
			status = LONG_1;
 8000c12:	4b7f      	ldr	r3, [pc, #508]	; (8000e10 <fsm_long_run+0x264>)
 8000c14:	2215      	movs	r2, #21
 8000c16:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8000c18:	2064      	movs	r0, #100	; 0x64
 8000c1a:	f000 fd87 	bl	800172c <setTimer1>
		}
		}
		break;
 8000c1e:	e0e1      	b.n	8000de4 <fsm_long_run+0x238>
	case LONG_1:
		display7SEG(1);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f7ff fbf1 	bl	8000408 <display7SEG>
		if(timer1_flag == 1){
 8000c26:	4b7b      	ldr	r3, [pc, #492]	; (8000e14 <fsm_long_run+0x268>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	f040 80dc 	bne.w	8000de8 <fsm_long_run+0x23c>
			timer1_flag = 0;
 8000c30:	4b78      	ldr	r3, [pc, #480]	; (8000e14 <fsm_long_run+0x268>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
		if(INC_flag1 == 1){
 8000c36:	4b78      	ldr	r3, [pc, #480]	; (8000e18 <fsm_long_run+0x26c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	f040 80d4 	bne.w	8000de8 <fsm_long_run+0x23c>
			INC_flag1 = 0;
 8000c40:	4b75      	ldr	r3, [pc, #468]	; (8000e18 <fsm_long_run+0x26c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
			status = LONG_2;
 8000c46:	4b72      	ldr	r3, [pc, #456]	; (8000e10 <fsm_long_run+0x264>)
 8000c48:	2216      	movs	r2, #22
 8000c4a:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8000c4c:	2064      	movs	r0, #100	; 0x64
 8000c4e:	f000 fd6d 	bl	800172c <setTimer1>
		}
		}
		break;
 8000c52:	e0c9      	b.n	8000de8 <fsm_long_run+0x23c>
	case LONG_2:
		display7SEG(2);
 8000c54:	2002      	movs	r0, #2
 8000c56:	f7ff fbd7 	bl	8000408 <display7SEG>
		if(timer1_flag == 1){
 8000c5a:	4b6e      	ldr	r3, [pc, #440]	; (8000e14 <fsm_long_run+0x268>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	f040 80c4 	bne.w	8000dec <fsm_long_run+0x240>
			timer1_flag = 0;
 8000c64:	4b6b      	ldr	r3, [pc, #428]	; (8000e14 <fsm_long_run+0x268>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
		if(INC_flag1 == 1){
 8000c6a:	4b6b      	ldr	r3, [pc, #428]	; (8000e18 <fsm_long_run+0x26c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	f040 80bc 	bne.w	8000dec <fsm_long_run+0x240>
			INC_flag1 = 0;
 8000c74:	4b68      	ldr	r3, [pc, #416]	; (8000e18 <fsm_long_run+0x26c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
			status = LONG_3;
 8000c7a:	4b65      	ldr	r3, [pc, #404]	; (8000e10 <fsm_long_run+0x264>)
 8000c7c:	2217      	movs	r2, #23
 8000c7e:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8000c80:	2064      	movs	r0, #100	; 0x64
 8000c82:	f000 fd53 	bl	800172c <setTimer1>
		}
		}
		break;
 8000c86:	e0b1      	b.n	8000dec <fsm_long_run+0x240>
	case LONG_3:
		display7SEG(3);
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f7ff fbbd 	bl	8000408 <display7SEG>
		if(timer1_flag == 1){
 8000c8e:	4b61      	ldr	r3, [pc, #388]	; (8000e14 <fsm_long_run+0x268>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	f040 80ac 	bne.w	8000df0 <fsm_long_run+0x244>
			timer1_flag = 0;
 8000c98:	4b5e      	ldr	r3, [pc, #376]	; (8000e14 <fsm_long_run+0x268>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
		if(INC_flag1 == 1){
 8000c9e:	4b5e      	ldr	r3, [pc, #376]	; (8000e18 <fsm_long_run+0x26c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	f040 80a4 	bne.w	8000df0 <fsm_long_run+0x244>
			INC_flag1 = 0;
 8000ca8:	4b5b      	ldr	r3, [pc, #364]	; (8000e18 <fsm_long_run+0x26c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
			status = LONG_4;
 8000cae:	4b58      	ldr	r3, [pc, #352]	; (8000e10 <fsm_long_run+0x264>)
 8000cb0:	2218      	movs	r2, #24
 8000cb2:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8000cb4:	2064      	movs	r0, #100	; 0x64
 8000cb6:	f000 fd39 	bl	800172c <setTimer1>
		}
		}
		break;
 8000cba:	e099      	b.n	8000df0 <fsm_long_run+0x244>
	case LONG_4:
		display7SEG(4);
 8000cbc:	2004      	movs	r0, #4
 8000cbe:	f7ff fba3 	bl	8000408 <display7SEG>
		if(timer1_flag == 1){
 8000cc2:	4b54      	ldr	r3, [pc, #336]	; (8000e14 <fsm_long_run+0x268>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	f040 8094 	bne.w	8000df4 <fsm_long_run+0x248>
			timer1_flag = 0;
 8000ccc:	4b51      	ldr	r3, [pc, #324]	; (8000e14 <fsm_long_run+0x268>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
		if(INC_flag1 == 1){
 8000cd2:	4b51      	ldr	r3, [pc, #324]	; (8000e18 <fsm_long_run+0x26c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	f040 808c 	bne.w	8000df4 <fsm_long_run+0x248>
			INC_flag1 = 0;
 8000cdc:	4b4e      	ldr	r3, [pc, #312]	; (8000e18 <fsm_long_run+0x26c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
			status = LONG_5;
 8000ce2:	4b4b      	ldr	r3, [pc, #300]	; (8000e10 <fsm_long_run+0x264>)
 8000ce4:	2219      	movs	r2, #25
 8000ce6:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8000ce8:	2064      	movs	r0, #100	; 0x64
 8000cea:	f000 fd1f 	bl	800172c <setTimer1>
		}
		}
		break;
 8000cee:	e081      	b.n	8000df4 <fsm_long_run+0x248>
	case LONG_5:
		display7SEG(5);
 8000cf0:	2005      	movs	r0, #5
 8000cf2:	f7ff fb89 	bl	8000408 <display7SEG>
		if(timer1_flag == 1){
 8000cf6:	4b47      	ldr	r3, [pc, #284]	; (8000e14 <fsm_long_run+0x268>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d17c      	bne.n	8000df8 <fsm_long_run+0x24c>
			timer1_flag = 0;
 8000cfe:	4b45      	ldr	r3, [pc, #276]	; (8000e14 <fsm_long_run+0x268>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
		if(INC_flag1 == 1){
 8000d04:	4b44      	ldr	r3, [pc, #272]	; (8000e18 <fsm_long_run+0x26c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d175      	bne.n	8000df8 <fsm_long_run+0x24c>
			INC_flag1 = 0;
 8000d0c:	4b42      	ldr	r3, [pc, #264]	; (8000e18 <fsm_long_run+0x26c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
			status = LONG_6;
 8000d12:	4b3f      	ldr	r3, [pc, #252]	; (8000e10 <fsm_long_run+0x264>)
 8000d14:	221a      	movs	r2, #26
 8000d16:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8000d18:	2064      	movs	r0, #100	; 0x64
 8000d1a:	f000 fd07 	bl	800172c <setTimer1>
		}
		}
		break;
 8000d1e:	e06b      	b.n	8000df8 <fsm_long_run+0x24c>
	case LONG_6:
		display7SEG(6);
 8000d20:	2006      	movs	r0, #6
 8000d22:	f7ff fb71 	bl	8000408 <display7SEG>
		if(timer1_flag == 1){
 8000d26:	4b3b      	ldr	r3, [pc, #236]	; (8000e14 <fsm_long_run+0x268>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d166      	bne.n	8000dfc <fsm_long_run+0x250>
			timer1_flag = 0;
 8000d2e:	4b39      	ldr	r3, [pc, #228]	; (8000e14 <fsm_long_run+0x268>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
		if(INC_flag1 == 1){
 8000d34:	4b38      	ldr	r3, [pc, #224]	; (8000e18 <fsm_long_run+0x26c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d15f      	bne.n	8000dfc <fsm_long_run+0x250>
			INC_flag1 = 0;
 8000d3c:	4b36      	ldr	r3, [pc, #216]	; (8000e18 <fsm_long_run+0x26c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
			status = LONG_7;
 8000d42:	4b33      	ldr	r3, [pc, #204]	; (8000e10 <fsm_long_run+0x264>)
 8000d44:	221b      	movs	r2, #27
 8000d46:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8000d48:	2064      	movs	r0, #100	; 0x64
 8000d4a:	f000 fcef 	bl	800172c <setTimer1>
		}
		}
		break;
 8000d4e:	e055      	b.n	8000dfc <fsm_long_run+0x250>
	case LONG_7:
		display7SEG(7);
 8000d50:	2007      	movs	r0, #7
 8000d52:	f7ff fb59 	bl	8000408 <display7SEG>
		if(timer1_flag == 1){
 8000d56:	4b2f      	ldr	r3, [pc, #188]	; (8000e14 <fsm_long_run+0x268>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d150      	bne.n	8000e00 <fsm_long_run+0x254>
			timer1_flag = 0;
 8000d5e:	4b2d      	ldr	r3, [pc, #180]	; (8000e14 <fsm_long_run+0x268>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
		if(INC_flag1 == 1){
 8000d64:	4b2c      	ldr	r3, [pc, #176]	; (8000e18 <fsm_long_run+0x26c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d149      	bne.n	8000e00 <fsm_long_run+0x254>
			INC_flag1 = 0;
 8000d6c:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <fsm_long_run+0x26c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
			status = LONG_8;
 8000d72:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <fsm_long_run+0x264>)
 8000d74:	221c      	movs	r2, #28
 8000d76:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8000d78:	2064      	movs	r0, #100	; 0x64
 8000d7a:	f000 fcd7 	bl	800172c <setTimer1>
		}
		}
		break;
 8000d7e:	e03f      	b.n	8000e00 <fsm_long_run+0x254>
	case LONG_8:
		display7SEG(8);
 8000d80:	2008      	movs	r0, #8
 8000d82:	f7ff fb41 	bl	8000408 <display7SEG>
		if(timer1_flag == 1){
 8000d86:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <fsm_long_run+0x268>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d13a      	bne.n	8000e04 <fsm_long_run+0x258>
			timer1_flag = 0;
 8000d8e:	4b21      	ldr	r3, [pc, #132]	; (8000e14 <fsm_long_run+0x268>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
		if(INC_flag1 == 1){
 8000d94:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <fsm_long_run+0x26c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d133      	bne.n	8000e04 <fsm_long_run+0x258>
			INC_flag1 = 0;
 8000d9c:	4b1e      	ldr	r3, [pc, #120]	; (8000e18 <fsm_long_run+0x26c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
			status = LONG_7;
 8000da2:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <fsm_long_run+0x264>)
 8000da4:	221b      	movs	r2, #27
 8000da6:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8000da8:	2064      	movs	r0, #100	; 0x64
 8000daa:	f000 fcbf 	bl	800172c <setTimer1>
		}
		}
		break;
 8000dae:	e029      	b.n	8000e04 <fsm_long_run+0x258>
	case LONG_9:
		display7SEG(9);
 8000db0:	2009      	movs	r0, #9
 8000db2:	f7ff fb29 	bl	8000408 <display7SEG>
		if(timer1_flag == 1){
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <fsm_long_run+0x268>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d124      	bne.n	8000e08 <fsm_long_run+0x25c>
			timer1_flag = 0;
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <fsm_long_run+0x268>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
		if(INC_flag1 == 1){
 8000dc4:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <fsm_long_run+0x26c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d11d      	bne.n	8000e08 <fsm_long_run+0x25c>
			INC_flag1 = 0;
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <fsm_long_run+0x26c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
			status = LONG_0;
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <fsm_long_run+0x264>)
 8000dd4:	2214      	movs	r2, #20
 8000dd6:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8000dd8:	2064      	movs	r0, #100	; 0x64
 8000dda:	f000 fca7 	bl	800172c <setTimer1>
		}
		}
		break;
 8000dde:	e013      	b.n	8000e08 <fsm_long_run+0x25c>
	default:
		break;
 8000de0:	bf00      	nop
 8000de2:	e012      	b.n	8000e0a <fsm_long_run+0x25e>
		break;
 8000de4:	bf00      	nop
 8000de6:	e010      	b.n	8000e0a <fsm_long_run+0x25e>
		break;
 8000de8:	bf00      	nop
 8000dea:	e00e      	b.n	8000e0a <fsm_long_run+0x25e>
		break;
 8000dec:	bf00      	nop
 8000dee:	e00c      	b.n	8000e0a <fsm_long_run+0x25e>
		break;
 8000df0:	bf00      	nop
 8000df2:	e00a      	b.n	8000e0a <fsm_long_run+0x25e>
		break;
 8000df4:	bf00      	nop
 8000df6:	e008      	b.n	8000e0a <fsm_long_run+0x25e>
		break;
 8000df8:	bf00      	nop
 8000dfa:	e006      	b.n	8000e0a <fsm_long_run+0x25e>
		break;
 8000dfc:	bf00      	nop
 8000dfe:	e004      	b.n	8000e0a <fsm_long_run+0x25e>
		break;
 8000e00:	bf00      	nop
 8000e02:	e002      	b.n	8000e0a <fsm_long_run+0x25e>
		break;
 8000e04:	bf00      	nop
 8000e06:	e000      	b.n	8000e0a <fsm_long_run+0x25e>
		break;
 8000e08:	bf00      	nop
	}
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000070 	.word	0x20000070
 8000e14:	20000084 	.word	0x20000084
 8000e18:	20000064 	.word	0x20000064

08000e1c <fsm_simple_buttons_run>:
 */
#include "fsm_simple_buttons_run.h"
#include "display7SEG.h"
#include "button.h"

void fsm_simple_buttons_run(){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	switch(status){
 8000e20:	4b85      	ldr	r3, [pc, #532]	; (8001038 <fsm_simple_buttons_run+0x21c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b09      	cmp	r3, #9
 8000e26:	f200 8351 	bhi.w	80014cc <fsm_simple_buttons_run+0x6b0>
 8000e2a:	a201      	add	r2, pc, #4	; (adr r2, 8000e30 <fsm_simple_buttons_run+0x14>)
 8000e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e30:	08000e59 	.word	0x08000e59
 8000e34:	08000ef9 	.word	0x08000ef9
 8000e38:	08000f99 	.word	0x08000f99
 8000e3c:	08001055 	.word	0x08001055
 8000e40:	080010f5 	.word	0x080010f5
 8000e44:	08001195 	.word	0x08001195
 8000e48:	08001235 	.word	0x08001235
 8000e4c:	080012f1 	.word	0x080012f1
 8000e50:	08001391 	.word	0x08001391
 8000e54:	0800142f 	.word	0x0800142f
	case BUT0:
		//TODO
		display7SEG(0);
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f7ff fad5 	bl	8000408 <display7SEG>
		if(RESET_flag == 1){
 8000e5e:	4b77      	ldr	r3, [pc, #476]	; (800103c <fsm_simple_buttons_run+0x220>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d105      	bne.n	8000e72 <fsm_simple_buttons_run+0x56>
			RESET_flag = 0;
 8000e66:	4b75      	ldr	r3, [pc, #468]	; (800103c <fsm_simple_buttons_run+0x220>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
			status = BUT0;
 8000e6c:	4b72      	ldr	r3, [pc, #456]	; (8001038 <fsm_simple_buttons_run+0x21c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
		}
		if(INC_flag == 1){
 8000e72:	4b73      	ldr	r3, [pc, #460]	; (8001040 <fsm_simple_buttons_run+0x224>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d108      	bne.n	8000e8c <fsm_simple_buttons_run+0x70>
			INC_flag = 0;
 8000e7a:	4b71      	ldr	r3, [pc, #452]	; (8001040 <fsm_simple_buttons_run+0x224>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
			status = BUT1;
 8000e80:	4b6d      	ldr	r3, [pc, #436]	; (8001038 <fsm_simple_buttons_run+0x21c>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	601a      	str	r2, [r3, #0]
			setTimer2(200);
 8000e86:	20c8      	movs	r0, #200	; 0xc8
 8000e88:	f000 fc64 	bl	8001754 <setTimer2>
		}
		if(INC_flag1 == 1){
 8000e8c:	4b6d      	ldr	r3, [pc, #436]	; (8001044 <fsm_simple_buttons_run+0x228>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d108      	bne.n	8000ea6 <fsm_simple_buttons_run+0x8a>
			INC_flag1 = 0;
 8000e94:	4b6b      	ldr	r3, [pc, #428]	; (8001044 <fsm_simple_buttons_run+0x228>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
			status = LONG_0;
 8000e9a:	4b67      	ldr	r3, [pc, #412]	; (8001038 <fsm_simple_buttons_run+0x21c>)
 8000e9c:	2214      	movs	r2, #20
 8000e9e:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8000ea0:	2064      	movs	r0, #100	; 0x64
 8000ea2:	f000 fc43 	bl	800172c <setTimer1>
		}
		if(DEC_flag == 1){
 8000ea6:	4b68      	ldr	r3, [pc, #416]	; (8001048 <fsm_simple_buttons_run+0x22c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d108      	bne.n	8000ec0 <fsm_simple_buttons_run+0xa4>
			DEC_flag = 0;
 8000eae:	4b66      	ldr	r3, [pc, #408]	; (8001048 <fsm_simple_buttons_run+0x22c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
			status = BUT9;
 8000eb4:	4b60      	ldr	r3, [pc, #384]	; (8001038 <fsm_simple_buttons_run+0x21c>)
 8000eb6:	2209      	movs	r2, #9
 8000eb8:	601a      	str	r2, [r3, #0]
			setTimer2(200);
 8000eba:	20c8      	movs	r0, #200	; 0xc8
 8000ebc:	f000 fc4a 	bl	8001754 <setTimer2>
		}
		if(DEC_flag1 == 1){
 8000ec0:	4b62      	ldr	r3, [pc, #392]	; (800104c <fsm_simple_buttons_run+0x230>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d108      	bne.n	8000eda <fsm_simple_buttons_run+0xbe>
			DEC_flag1 = 0;
 8000ec8:	4b60      	ldr	r3, [pc, #384]	; (800104c <fsm_simple_buttons_run+0x230>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
			status = LONG_0;
 8000ece:	4b5a      	ldr	r3, [pc, #360]	; (8001038 <fsm_simple_buttons_run+0x21c>)
 8000ed0:	2214      	movs	r2, #20
 8000ed2:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8000ed4:	2064      	movs	r0, #100	; 0x64
 8000ed6:	f000 fc29 	bl	800172c <setTimer1>
		}
		if(timer2_flag == 1){
 8000eda:	4b5d      	ldr	r3, [pc, #372]	; (8001050 <fsm_simple_buttons_run+0x234>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	f040 82f6 	bne.w	80014d0 <fsm_simple_buttons_run+0x6b4>
			timer2_flag = 0;
 8000ee4:	4b5a      	ldr	r3, [pc, #360]	; (8001050 <fsm_simple_buttons_run+0x234>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
			status = AUTO_0;
 8000eea:	4b53      	ldr	r3, [pc, #332]	; (8001038 <fsm_simple_buttons_run+0x21c>)
 8000eec:	220a      	movs	r2, #10
 8000eee:	601a      	str	r2, [r3, #0]
			setTimer2(200);
 8000ef0:	20c8      	movs	r0, #200	; 0xc8
 8000ef2:	f000 fc2f 	bl	8001754 <setTimer2>
		}

		break;
 8000ef6:	e2eb      	b.n	80014d0 <fsm_simple_buttons_run+0x6b4>
	case BUT1:
		//TODO
		display7SEG(1);
 8000ef8:	2001      	movs	r0, #1
 8000efa:	f7ff fa85 	bl	8000408 <display7SEG>
		if(RESET_flag == 1){
 8000efe:	4b4f      	ldr	r3, [pc, #316]	; (800103c <fsm_simple_buttons_run+0x220>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d105      	bne.n	8000f12 <fsm_simple_buttons_run+0xf6>
			RESET_flag = 0;
 8000f06:	4b4d      	ldr	r3, [pc, #308]	; (800103c <fsm_simple_buttons_run+0x220>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
			status = BUT0;
 8000f0c:	4b4a      	ldr	r3, [pc, #296]	; (8001038 <fsm_simple_buttons_run+0x21c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]

		}
		if(INC_flag == 1){
 8000f12:	4b4b      	ldr	r3, [pc, #300]	; (8001040 <fsm_simple_buttons_run+0x224>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d108      	bne.n	8000f2c <fsm_simple_buttons_run+0x110>
			INC_flag = 0;
 8000f1a:	4b49      	ldr	r3, [pc, #292]	; (8001040 <fsm_simple_buttons_run+0x224>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
			status = BUT2;
 8000f20:	4b45      	ldr	r3, [pc, #276]	; (8001038 <fsm_simple_buttons_run+0x21c>)
 8000f22:	2202      	movs	r2, #2
 8000f24:	601a      	str	r2, [r3, #0]
			setTimer2(200);
 8000f26:	20c8      	movs	r0, #200	; 0xc8
 8000f28:	f000 fc14 	bl	8001754 <setTimer2>
			}
		if(INC_flag1 == 1){
 8000f2c:	4b45      	ldr	r3, [pc, #276]	; (8001044 <fsm_simple_buttons_run+0x228>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d108      	bne.n	8000f46 <fsm_simple_buttons_run+0x12a>
			INC_flag1 = 0;
 8000f34:	4b43      	ldr	r3, [pc, #268]	; (8001044 <fsm_simple_buttons_run+0x228>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
			status = LONG_1;
 8000f3a:	4b3f      	ldr	r3, [pc, #252]	; (8001038 <fsm_simple_buttons_run+0x21c>)
 8000f3c:	2215      	movs	r2, #21
 8000f3e:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8000f40:	2064      	movs	r0, #100	; 0x64
 8000f42:	f000 fbf3 	bl	800172c <setTimer1>
		}
		if(DEC_flag1 == 1){
 8000f46:	4b41      	ldr	r3, [pc, #260]	; (800104c <fsm_simple_buttons_run+0x230>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d108      	bne.n	8000f60 <fsm_simple_buttons_run+0x144>
			DEC_flag1 = 0;
 8000f4e:	4b3f      	ldr	r3, [pc, #252]	; (800104c <fsm_simple_buttons_run+0x230>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
			status = LONG_1;
 8000f54:	4b38      	ldr	r3, [pc, #224]	; (8001038 <fsm_simple_buttons_run+0x21c>)
 8000f56:	2215      	movs	r2, #21
 8000f58:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8000f5a:	2064      	movs	r0, #100	; 0x64
 8000f5c:	f000 fbe6 	bl	800172c <setTimer1>
		}
		if(DEC_flag == 1){
 8000f60:	4b39      	ldr	r3, [pc, #228]	; (8001048 <fsm_simple_buttons_run+0x22c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d108      	bne.n	8000f7a <fsm_simple_buttons_run+0x15e>
			DEC_flag = 0;
 8000f68:	4b37      	ldr	r3, [pc, #220]	; (8001048 <fsm_simple_buttons_run+0x22c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
			status = BUT0;
 8000f6e:	4b32      	ldr	r3, [pc, #200]	; (8001038 <fsm_simple_buttons_run+0x21c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
			setTimer2(200);
 8000f74:	20c8      	movs	r0, #200	; 0xc8
 8000f76:	f000 fbed 	bl	8001754 <setTimer2>
		}
		if(timer2_flag == 1){
 8000f7a:	4b35      	ldr	r3, [pc, #212]	; (8001050 <fsm_simple_buttons_run+0x234>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	f040 82a8 	bne.w	80014d4 <fsm_simple_buttons_run+0x6b8>
			timer2_flag = 0;
 8000f84:	4b32      	ldr	r3, [pc, #200]	; (8001050 <fsm_simple_buttons_run+0x234>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
			status = AUTO_1;
 8000f8a:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <fsm_simple_buttons_run+0x21c>)
 8000f8c:	220b      	movs	r2, #11
 8000f8e:	601a      	str	r2, [r3, #0]
			setTimer2(200);
 8000f90:	20c8      	movs	r0, #200	; 0xc8
 8000f92:	f000 fbdf 	bl	8001754 <setTimer2>
		}
		break;
 8000f96:	e29d      	b.n	80014d4 <fsm_simple_buttons_run+0x6b8>
	case BUT2:
		//TODO
		display7SEG(2);
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f7ff fa35 	bl	8000408 <display7SEG>
		if(RESET_flag == 1){
 8000f9e:	4b27      	ldr	r3, [pc, #156]	; (800103c <fsm_simple_buttons_run+0x220>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d105      	bne.n	8000fb2 <fsm_simple_buttons_run+0x196>
					RESET_flag = 0;
 8000fa6:	4b25      	ldr	r3, [pc, #148]	; (800103c <fsm_simple_buttons_run+0x220>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
					status = BUT0;
 8000fac:	4b22      	ldr	r3, [pc, #136]	; (8001038 <fsm_simple_buttons_run+0x21c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]

		}
		if(INC_flag == 1){
 8000fb2:	4b23      	ldr	r3, [pc, #140]	; (8001040 <fsm_simple_buttons_run+0x224>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d108      	bne.n	8000fcc <fsm_simple_buttons_run+0x1b0>
					INC_flag = 0;
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <fsm_simple_buttons_run+0x224>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
					status = BUT3;
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <fsm_simple_buttons_run+0x21c>)
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	601a      	str	r2, [r3, #0]
					setTimer2(200);
 8000fc6:	20c8      	movs	r0, #200	; 0xc8
 8000fc8:	f000 fbc4 	bl	8001754 <setTimer2>
							}
		if(DEC_flag == 1){
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <fsm_simple_buttons_run+0x22c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d108      	bne.n	8000fe6 <fsm_simple_buttons_run+0x1ca>
					DEC_flag = 0;
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <fsm_simple_buttons_run+0x22c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
					status = BUT1;
 8000fda:	4b17      	ldr	r3, [pc, #92]	; (8001038 <fsm_simple_buttons_run+0x21c>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	601a      	str	r2, [r3, #0]
					setTimer2(200);
 8000fe0:	20c8      	movs	r0, #200	; 0xc8
 8000fe2:	f000 fbb7 	bl	8001754 <setTimer2>
				}
		if(timer2_flag == 1){
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <fsm_simple_buttons_run+0x234>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d108      	bne.n	8001000 <fsm_simple_buttons_run+0x1e4>
			timer2_flag = 0;
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <fsm_simple_buttons_run+0x234>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
			status = AUTO_2;
 8000ff4:	4b10      	ldr	r3, [pc, #64]	; (8001038 <fsm_simple_buttons_run+0x21c>)
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	601a      	str	r2, [r3, #0]
			setTimer2(200);
 8000ffa:	20c8      	movs	r0, #200	; 0xc8
 8000ffc:	f000 fbaa 	bl	8001754 <setTimer2>
		}
		if(INC_flag1 == 1){
 8001000:	4b10      	ldr	r3, [pc, #64]	; (8001044 <fsm_simple_buttons_run+0x228>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d108      	bne.n	800101a <fsm_simple_buttons_run+0x1fe>
			INC_flag1 = 0;
 8001008:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <fsm_simple_buttons_run+0x228>)
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
			status = LONG_2;
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <fsm_simple_buttons_run+0x21c>)
 8001010:	2216      	movs	r2, #22
 8001012:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8001014:	2064      	movs	r0, #100	; 0x64
 8001016:	f000 fb89 	bl	800172c <setTimer1>
		}
		if(DEC_flag1 == 1){
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <fsm_simple_buttons_run+0x230>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b01      	cmp	r3, #1
 8001020:	f040 825a 	bne.w	80014d8 <fsm_simple_buttons_run+0x6bc>
			DEC_flag1 = 0;
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <fsm_simple_buttons_run+0x230>)
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
			status = LONG_2;
 800102a:	4b03      	ldr	r3, [pc, #12]	; (8001038 <fsm_simple_buttons_run+0x21c>)
 800102c:	2216      	movs	r2, #22
 800102e:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8001030:	2064      	movs	r0, #100	; 0x64
 8001032:	f000 fb7b 	bl	800172c <setTimer1>
		}
		break;
 8001036:	e24f      	b.n	80014d8 <fsm_simple_buttons_run+0x6bc>
 8001038:	20000070 	.word	0x20000070
 800103c:	2000005c 	.word	0x2000005c
 8001040:	20000060 	.word	0x20000060
 8001044:	20000064 	.word	0x20000064
 8001048:	20000068 	.word	0x20000068
 800104c:	2000006c 	.word	0x2000006c
 8001050:	20000088 	.word	0x20000088
	case BUT3:
		//TODO
				display7SEG(3);
 8001054:	2003      	movs	r0, #3
 8001056:	f7ff f9d7 	bl	8000408 <display7SEG>
				if(RESET_flag == 1){
 800105a:	4b9e      	ldr	r3, [pc, #632]	; (80012d4 <fsm_simple_buttons_run+0x4b8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d105      	bne.n	800106e <fsm_simple_buttons_run+0x252>
							RESET_flag = 0;
 8001062:	4b9c      	ldr	r3, [pc, #624]	; (80012d4 <fsm_simple_buttons_run+0x4b8>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
							status = BUT0;
 8001068:	4b9b      	ldr	r3, [pc, #620]	; (80012d8 <fsm_simple_buttons_run+0x4bc>)
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]

				}
				if(INC_flag == 1){
 800106e:	4b9b      	ldr	r3, [pc, #620]	; (80012dc <fsm_simple_buttons_run+0x4c0>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d108      	bne.n	8001088 <fsm_simple_buttons_run+0x26c>
							INC_flag = 0;
 8001076:	4b99      	ldr	r3, [pc, #612]	; (80012dc <fsm_simple_buttons_run+0x4c0>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
							status = BUT4;
 800107c:	4b96      	ldr	r3, [pc, #600]	; (80012d8 <fsm_simple_buttons_run+0x4bc>)
 800107e:	2204      	movs	r2, #4
 8001080:	601a      	str	r2, [r3, #0]
							setTimer2(200);
 8001082:	20c8      	movs	r0, #200	; 0xc8
 8001084:	f000 fb66 	bl	8001754 <setTimer2>
									}
				if(DEC_flag == 1){
 8001088:	4b95      	ldr	r3, [pc, #596]	; (80012e0 <fsm_simple_buttons_run+0x4c4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d108      	bne.n	80010a2 <fsm_simple_buttons_run+0x286>
							DEC_flag = 0;
 8001090:	4b93      	ldr	r3, [pc, #588]	; (80012e0 <fsm_simple_buttons_run+0x4c4>)
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
							status = BUT2;
 8001096:	4b90      	ldr	r3, [pc, #576]	; (80012d8 <fsm_simple_buttons_run+0x4bc>)
 8001098:	2202      	movs	r2, #2
 800109a:	601a      	str	r2, [r3, #0]
							setTimer2(200);
 800109c:	20c8      	movs	r0, #200	; 0xc8
 800109e:	f000 fb59 	bl	8001754 <setTimer2>
						}
				if(timer2_flag == 1){
 80010a2:	4b90      	ldr	r3, [pc, #576]	; (80012e4 <fsm_simple_buttons_run+0x4c8>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d108      	bne.n	80010bc <fsm_simple_buttons_run+0x2a0>
					timer2_flag = 0;
 80010aa:	4b8e      	ldr	r3, [pc, #568]	; (80012e4 <fsm_simple_buttons_run+0x4c8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
					status = AUTO_3;
 80010b0:	4b89      	ldr	r3, [pc, #548]	; (80012d8 <fsm_simple_buttons_run+0x4bc>)
 80010b2:	220d      	movs	r2, #13
 80010b4:	601a      	str	r2, [r3, #0]
					setTimer2(200);
 80010b6:	20c8      	movs	r0, #200	; 0xc8
 80010b8:	f000 fb4c 	bl	8001754 <setTimer2>
				}
				if(INC_flag1 == 1){
 80010bc:	4b8a      	ldr	r3, [pc, #552]	; (80012e8 <fsm_simple_buttons_run+0x4cc>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d108      	bne.n	80010d6 <fsm_simple_buttons_run+0x2ba>
					INC_flag1 = 0;
 80010c4:	4b88      	ldr	r3, [pc, #544]	; (80012e8 <fsm_simple_buttons_run+0x4cc>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
					status = LONG_3;
 80010ca:	4b83      	ldr	r3, [pc, #524]	; (80012d8 <fsm_simple_buttons_run+0x4bc>)
 80010cc:	2217      	movs	r2, #23
 80010ce:	601a      	str	r2, [r3, #0]
					setTimer1(100);
 80010d0:	2064      	movs	r0, #100	; 0x64
 80010d2:	f000 fb2b 	bl	800172c <setTimer1>
				}
				if(DEC_flag1 == 1){
 80010d6:	4b85      	ldr	r3, [pc, #532]	; (80012ec <fsm_simple_buttons_run+0x4d0>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	f040 81fe 	bne.w	80014dc <fsm_simple_buttons_run+0x6c0>
					DEC_flag1 = 0;
 80010e0:	4b82      	ldr	r3, [pc, #520]	; (80012ec <fsm_simple_buttons_run+0x4d0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
					status = LONG_3;
 80010e6:	4b7c      	ldr	r3, [pc, #496]	; (80012d8 <fsm_simple_buttons_run+0x4bc>)
 80010e8:	2217      	movs	r2, #23
 80010ea:	601a      	str	r2, [r3, #0]
					setTimer1(100);
 80010ec:	2064      	movs	r0, #100	; 0x64
 80010ee:	f000 fb1d 	bl	800172c <setTimer1>
				}
				break;
 80010f2:	e1f3      	b.n	80014dc <fsm_simple_buttons_run+0x6c0>
	case BUT4:
		//TODO
		display7SEG(4);
 80010f4:	2004      	movs	r0, #4
 80010f6:	f7ff f987 	bl	8000408 <display7SEG>
		if(RESET_flag == 1){
 80010fa:	4b76      	ldr	r3, [pc, #472]	; (80012d4 <fsm_simple_buttons_run+0x4b8>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d105      	bne.n	800110e <fsm_simple_buttons_run+0x2f2>
					RESET_flag = 0;
 8001102:	4b74      	ldr	r3, [pc, #464]	; (80012d4 <fsm_simple_buttons_run+0x4b8>)
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
					status = BUT0;
 8001108:	4b73      	ldr	r3, [pc, #460]	; (80012d8 <fsm_simple_buttons_run+0x4bc>)
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]

		}
		if(INC_flag == 1){
 800110e:	4b73      	ldr	r3, [pc, #460]	; (80012dc <fsm_simple_buttons_run+0x4c0>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d108      	bne.n	8001128 <fsm_simple_buttons_run+0x30c>
								INC_flag = 0;
 8001116:	4b71      	ldr	r3, [pc, #452]	; (80012dc <fsm_simple_buttons_run+0x4c0>)
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
								status = BUT5;
 800111c:	4b6e      	ldr	r3, [pc, #440]	; (80012d8 <fsm_simple_buttons_run+0x4bc>)
 800111e:	2205      	movs	r2, #5
 8001120:	601a      	str	r2, [r3, #0]
								setTimer2(200);
 8001122:	20c8      	movs	r0, #200	; 0xc8
 8001124:	f000 fb16 	bl	8001754 <setTimer2>
							}
		if(DEC_flag == 1){
 8001128:	4b6d      	ldr	r3, [pc, #436]	; (80012e0 <fsm_simple_buttons_run+0x4c4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d108      	bne.n	8001142 <fsm_simple_buttons_run+0x326>
								DEC_flag = 0;
 8001130:	4b6b      	ldr	r3, [pc, #428]	; (80012e0 <fsm_simple_buttons_run+0x4c4>)
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
								status = BUT3;
 8001136:	4b68      	ldr	r3, [pc, #416]	; (80012d8 <fsm_simple_buttons_run+0x4bc>)
 8001138:	2203      	movs	r2, #3
 800113a:	601a      	str	r2, [r3, #0]
								setTimer2(200);
 800113c:	20c8      	movs	r0, #200	; 0xc8
 800113e:	f000 fb09 	bl	8001754 <setTimer2>
				}
		if(timer2_flag == 1){
 8001142:	4b68      	ldr	r3, [pc, #416]	; (80012e4 <fsm_simple_buttons_run+0x4c8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d108      	bne.n	800115c <fsm_simple_buttons_run+0x340>
			timer2_flag = 0;
 800114a:	4b66      	ldr	r3, [pc, #408]	; (80012e4 <fsm_simple_buttons_run+0x4c8>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
			status = AUTO_4;
 8001150:	4b61      	ldr	r3, [pc, #388]	; (80012d8 <fsm_simple_buttons_run+0x4bc>)
 8001152:	220e      	movs	r2, #14
 8001154:	601a      	str	r2, [r3, #0]
			setTimer2(200);
 8001156:	20c8      	movs	r0, #200	; 0xc8
 8001158:	f000 fafc 	bl	8001754 <setTimer2>
		}
		if(INC_flag1 == 1){
 800115c:	4b62      	ldr	r3, [pc, #392]	; (80012e8 <fsm_simple_buttons_run+0x4cc>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d108      	bne.n	8001176 <fsm_simple_buttons_run+0x35a>
			INC_flag1 = 0;
 8001164:	4b60      	ldr	r3, [pc, #384]	; (80012e8 <fsm_simple_buttons_run+0x4cc>)
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
			status = LONG_4;
 800116a:	4b5b      	ldr	r3, [pc, #364]	; (80012d8 <fsm_simple_buttons_run+0x4bc>)
 800116c:	2218      	movs	r2, #24
 800116e:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8001170:	2064      	movs	r0, #100	; 0x64
 8001172:	f000 fadb 	bl	800172c <setTimer1>
		}
		if(DEC_flag1 == 1){
 8001176:	4b5d      	ldr	r3, [pc, #372]	; (80012ec <fsm_simple_buttons_run+0x4d0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b01      	cmp	r3, #1
 800117c:	f040 81b0 	bne.w	80014e0 <fsm_simple_buttons_run+0x6c4>
			DEC_flag1 = 0;
 8001180:	4b5a      	ldr	r3, [pc, #360]	; (80012ec <fsm_simple_buttons_run+0x4d0>)
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
			status = LONG_4;
 8001186:	4b54      	ldr	r3, [pc, #336]	; (80012d8 <fsm_simple_buttons_run+0x4bc>)
 8001188:	2218      	movs	r2, #24
 800118a:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 800118c:	2064      	movs	r0, #100	; 0x64
 800118e:	f000 facd 	bl	800172c <setTimer1>
		}
		break;
 8001192:	e1a5      	b.n	80014e0 <fsm_simple_buttons_run+0x6c4>
	case BUT5:
		//TODO
		display7SEG(5);
 8001194:	2005      	movs	r0, #5
 8001196:	f7ff f937 	bl	8000408 <display7SEG>
		if(RESET_flag == 1){
 800119a:	4b4e      	ldr	r3, [pc, #312]	; (80012d4 <fsm_simple_buttons_run+0x4b8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d105      	bne.n	80011ae <fsm_simple_buttons_run+0x392>
					RESET_flag = 0;
 80011a2:	4b4c      	ldr	r3, [pc, #304]	; (80012d4 <fsm_simple_buttons_run+0x4b8>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
					status = BUT0;
 80011a8:	4b4b      	ldr	r3, [pc, #300]	; (80012d8 <fsm_simple_buttons_run+0x4bc>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]

		}
					if(INC_flag == 1){
 80011ae:	4b4b      	ldr	r3, [pc, #300]	; (80012dc <fsm_simple_buttons_run+0x4c0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d108      	bne.n	80011c8 <fsm_simple_buttons_run+0x3ac>
								INC_flag = 0;
 80011b6:	4b49      	ldr	r3, [pc, #292]	; (80012dc <fsm_simple_buttons_run+0x4c0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
								status = BUT6;
 80011bc:	4b46      	ldr	r3, [pc, #280]	; (80012d8 <fsm_simple_buttons_run+0x4bc>)
 80011be:	2206      	movs	r2, #6
 80011c0:	601a      	str	r2, [r3, #0]
								setTimer2(200);
 80011c2:	20c8      	movs	r0, #200	; 0xc8
 80011c4:	f000 fac6 	bl	8001754 <setTimer2>
							}
							if(DEC_flag == 1){
 80011c8:	4b45      	ldr	r3, [pc, #276]	; (80012e0 <fsm_simple_buttons_run+0x4c4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d108      	bne.n	80011e2 <fsm_simple_buttons_run+0x3c6>
								DEC_flag = 0;
 80011d0:	4b43      	ldr	r3, [pc, #268]	; (80012e0 <fsm_simple_buttons_run+0x4c4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
								status = BUT4;
 80011d6:	4b40      	ldr	r3, [pc, #256]	; (80012d8 <fsm_simple_buttons_run+0x4bc>)
 80011d8:	2204      	movs	r2, #4
 80011da:	601a      	str	r2, [r3, #0]
								setTimer2(200);
 80011dc:	20c8      	movs	r0, #200	; 0xc8
 80011de:	f000 fab9 	bl	8001754 <setTimer2>
				}
							if(timer2_flag == 1){
 80011e2:	4b40      	ldr	r3, [pc, #256]	; (80012e4 <fsm_simple_buttons_run+0x4c8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d108      	bne.n	80011fc <fsm_simple_buttons_run+0x3e0>
								timer2_flag = 0;
 80011ea:	4b3e      	ldr	r3, [pc, #248]	; (80012e4 <fsm_simple_buttons_run+0x4c8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
								status = AUTO_5;
 80011f0:	4b39      	ldr	r3, [pc, #228]	; (80012d8 <fsm_simple_buttons_run+0x4bc>)
 80011f2:	220f      	movs	r2, #15
 80011f4:	601a      	str	r2, [r3, #0]
								setTimer2(200);
 80011f6:	20c8      	movs	r0, #200	; 0xc8
 80011f8:	f000 faac 	bl	8001754 <setTimer2>
							}
							if(INC_flag1 == 1){
 80011fc:	4b3a      	ldr	r3, [pc, #232]	; (80012e8 <fsm_simple_buttons_run+0x4cc>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d108      	bne.n	8001216 <fsm_simple_buttons_run+0x3fa>
								INC_flag1 = 0;
 8001204:	4b38      	ldr	r3, [pc, #224]	; (80012e8 <fsm_simple_buttons_run+0x4cc>)
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
								status = LONG_5;
 800120a:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <fsm_simple_buttons_run+0x4bc>)
 800120c:	2219      	movs	r2, #25
 800120e:	601a      	str	r2, [r3, #0]
								setTimer1(100);
 8001210:	2064      	movs	r0, #100	; 0x64
 8001212:	f000 fa8b 	bl	800172c <setTimer1>
							}
							if(DEC_flag1 == 1){
 8001216:	4b35      	ldr	r3, [pc, #212]	; (80012ec <fsm_simple_buttons_run+0x4d0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b01      	cmp	r3, #1
 800121c:	f040 8162 	bne.w	80014e4 <fsm_simple_buttons_run+0x6c8>
								DEC_flag1 = 0;
 8001220:	4b32      	ldr	r3, [pc, #200]	; (80012ec <fsm_simple_buttons_run+0x4d0>)
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
								status = LONG_5;
 8001226:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <fsm_simple_buttons_run+0x4bc>)
 8001228:	2219      	movs	r2, #25
 800122a:	601a      	str	r2, [r3, #0]
								setTimer1(100);
 800122c:	2064      	movs	r0, #100	; 0x64
 800122e:	f000 fa7d 	bl	800172c <setTimer1>
							}
		break;
 8001232:	e157      	b.n	80014e4 <fsm_simple_buttons_run+0x6c8>
	case BUT6:
		//TODO
		display7SEG(6);
 8001234:	2006      	movs	r0, #6
 8001236:	f7ff f8e7 	bl	8000408 <display7SEG>
		if(RESET_flag == 1){
 800123a:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <fsm_simple_buttons_run+0x4b8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d105      	bne.n	800124e <fsm_simple_buttons_run+0x432>
					RESET_flag = 0;
 8001242:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <fsm_simple_buttons_run+0x4b8>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
					status = BUT0;
 8001248:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <fsm_simple_buttons_run+0x4bc>)
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]

		}
					if(INC_flag == 1){
 800124e:	4b23      	ldr	r3, [pc, #140]	; (80012dc <fsm_simple_buttons_run+0x4c0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d108      	bne.n	8001268 <fsm_simple_buttons_run+0x44c>
								INC_flag = 0;
 8001256:	4b21      	ldr	r3, [pc, #132]	; (80012dc <fsm_simple_buttons_run+0x4c0>)
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
								status = BUT7;
 800125c:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <fsm_simple_buttons_run+0x4bc>)
 800125e:	2207      	movs	r2, #7
 8001260:	601a      	str	r2, [r3, #0]
								setTimer2(200);
 8001262:	20c8      	movs	r0, #200	; 0xc8
 8001264:	f000 fa76 	bl	8001754 <setTimer2>
							}
							if(DEC_flag == 1){
 8001268:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <fsm_simple_buttons_run+0x4c4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d108      	bne.n	8001282 <fsm_simple_buttons_run+0x466>
								DEC_flag = 0;
 8001270:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <fsm_simple_buttons_run+0x4c4>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
								status = BUT5;
 8001276:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <fsm_simple_buttons_run+0x4bc>)
 8001278:	2205      	movs	r2, #5
 800127a:	601a      	str	r2, [r3, #0]
								setTimer2(200);
 800127c:	20c8      	movs	r0, #200	; 0xc8
 800127e:	f000 fa69 	bl	8001754 <setTimer2>
				}
							if(timer2_flag == 1){
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <fsm_simple_buttons_run+0x4c8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d108      	bne.n	800129c <fsm_simple_buttons_run+0x480>
								timer2_flag = 0;
 800128a:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <fsm_simple_buttons_run+0x4c8>)
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
								status = AUTO_6;
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <fsm_simple_buttons_run+0x4bc>)
 8001292:	2210      	movs	r2, #16
 8001294:	601a      	str	r2, [r3, #0]
								setTimer2(200);
 8001296:	20c8      	movs	r0, #200	; 0xc8
 8001298:	f000 fa5c 	bl	8001754 <setTimer2>
							}
							if(INC_flag1 == 1){
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <fsm_simple_buttons_run+0x4cc>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d108      	bne.n	80012b6 <fsm_simple_buttons_run+0x49a>
								INC_flag1 = 0;
 80012a4:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <fsm_simple_buttons_run+0x4cc>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
								status = LONG_6;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <fsm_simple_buttons_run+0x4bc>)
 80012ac:	221a      	movs	r2, #26
 80012ae:	601a      	str	r2, [r3, #0]
								setTimer1(100);
 80012b0:	2064      	movs	r0, #100	; 0x64
 80012b2:	f000 fa3b 	bl	800172c <setTimer1>
							}
							if(DEC_flag1 == 1){
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <fsm_simple_buttons_run+0x4d0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	f040 8114 	bne.w	80014e8 <fsm_simple_buttons_run+0x6cc>
								DEC_flag1 = 0;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <fsm_simple_buttons_run+0x4d0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
								status = LONG_6;
 80012c6:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <fsm_simple_buttons_run+0x4bc>)
 80012c8:	221a      	movs	r2, #26
 80012ca:	601a      	str	r2, [r3, #0]
								setTimer1(100);
 80012cc:	2064      	movs	r0, #100	; 0x64
 80012ce:	f000 fa2d 	bl	800172c <setTimer1>
							}
		break;
 80012d2:	e109      	b.n	80014e8 <fsm_simple_buttons_run+0x6cc>
 80012d4:	2000005c 	.word	0x2000005c
 80012d8:	20000070 	.word	0x20000070
 80012dc:	20000060 	.word	0x20000060
 80012e0:	20000068 	.word	0x20000068
 80012e4:	20000088 	.word	0x20000088
 80012e8:	20000064 	.word	0x20000064
 80012ec:	2000006c 	.word	0x2000006c
	case BUT7:
		//TODO
		display7SEG(7);
 80012f0:	2007      	movs	r0, #7
 80012f2:	f7ff f889 	bl	8000408 <display7SEG>
		if(RESET_flag == 1){
 80012f6:	4b81      	ldr	r3, [pc, #516]	; (80014fc <fsm_simple_buttons_run+0x6e0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d105      	bne.n	800130a <fsm_simple_buttons_run+0x4ee>
					RESET_flag = 0;
 80012fe:	4b7f      	ldr	r3, [pc, #508]	; (80014fc <fsm_simple_buttons_run+0x6e0>)
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
					status = BUT0;
 8001304:	4b7e      	ldr	r3, [pc, #504]	; (8001500 <fsm_simple_buttons_run+0x6e4>)
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
		}
				if(INC_flag == 1){
 800130a:	4b7e      	ldr	r3, [pc, #504]	; (8001504 <fsm_simple_buttons_run+0x6e8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d108      	bne.n	8001324 <fsm_simple_buttons_run+0x508>
					INC_flag = 0;
 8001312:	4b7c      	ldr	r3, [pc, #496]	; (8001504 <fsm_simple_buttons_run+0x6e8>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
					status = BUT8;
 8001318:	4b79      	ldr	r3, [pc, #484]	; (8001500 <fsm_simple_buttons_run+0x6e4>)
 800131a:	2208      	movs	r2, #8
 800131c:	601a      	str	r2, [r3, #0]
					setTimer2(200);
 800131e:	20c8      	movs	r0, #200	; 0xc8
 8001320:	f000 fa18 	bl	8001754 <setTimer2>
				}
				if(DEC_flag == 1){
 8001324:	4b78      	ldr	r3, [pc, #480]	; (8001508 <fsm_simple_buttons_run+0x6ec>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d108      	bne.n	800133e <fsm_simple_buttons_run+0x522>
					DEC_flag = 0;
 800132c:	4b76      	ldr	r3, [pc, #472]	; (8001508 <fsm_simple_buttons_run+0x6ec>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
					status = BUT6;
 8001332:	4b73      	ldr	r3, [pc, #460]	; (8001500 <fsm_simple_buttons_run+0x6e4>)
 8001334:	2206      	movs	r2, #6
 8001336:	601a      	str	r2, [r3, #0]
					setTimer2(200);
 8001338:	20c8      	movs	r0, #200	; 0xc8
 800133a:	f000 fa0b 	bl	8001754 <setTimer2>
				}
				if(timer2_flag == 1){
 800133e:	4b73      	ldr	r3, [pc, #460]	; (800150c <fsm_simple_buttons_run+0x6f0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d108      	bne.n	8001358 <fsm_simple_buttons_run+0x53c>
					timer2_flag = 0;
 8001346:	4b71      	ldr	r3, [pc, #452]	; (800150c <fsm_simple_buttons_run+0x6f0>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
					status = AUTO_7;
 800134c:	4b6c      	ldr	r3, [pc, #432]	; (8001500 <fsm_simple_buttons_run+0x6e4>)
 800134e:	2211      	movs	r2, #17
 8001350:	601a      	str	r2, [r3, #0]
					setTimer2(200);
 8001352:	20c8      	movs	r0, #200	; 0xc8
 8001354:	f000 f9fe 	bl	8001754 <setTimer2>
				}
				if(INC_flag1 == 1){
 8001358:	4b6d      	ldr	r3, [pc, #436]	; (8001510 <fsm_simple_buttons_run+0x6f4>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d108      	bne.n	8001372 <fsm_simple_buttons_run+0x556>
					INC_flag1 = 0;
 8001360:	4b6b      	ldr	r3, [pc, #428]	; (8001510 <fsm_simple_buttons_run+0x6f4>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
					status = LONG_7;
 8001366:	4b66      	ldr	r3, [pc, #408]	; (8001500 <fsm_simple_buttons_run+0x6e4>)
 8001368:	221b      	movs	r2, #27
 800136a:	601a      	str	r2, [r3, #0]
					setTimer1(100);
 800136c:	2064      	movs	r0, #100	; 0x64
 800136e:	f000 f9dd 	bl	800172c <setTimer1>
				}
				if(DEC_flag1 == 1){
 8001372:	4b68      	ldr	r3, [pc, #416]	; (8001514 <fsm_simple_buttons_run+0x6f8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b01      	cmp	r3, #1
 8001378:	f040 80b8 	bne.w	80014ec <fsm_simple_buttons_run+0x6d0>
					DEC_flag1 = 0;
 800137c:	4b65      	ldr	r3, [pc, #404]	; (8001514 <fsm_simple_buttons_run+0x6f8>)
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
					status = LONG_7;
 8001382:	4b5f      	ldr	r3, [pc, #380]	; (8001500 <fsm_simple_buttons_run+0x6e4>)
 8001384:	221b      	movs	r2, #27
 8001386:	601a      	str	r2, [r3, #0]
					setTimer1(100);
 8001388:	2064      	movs	r0, #100	; 0x64
 800138a:	f000 f9cf 	bl	800172c <setTimer1>
				}
		break;
 800138e:	e0ad      	b.n	80014ec <fsm_simple_buttons_run+0x6d0>
	case BUT8:
		//TODO
		display7SEG(8);
 8001390:	2008      	movs	r0, #8
 8001392:	f7ff f839 	bl	8000408 <display7SEG>
		if(RESET_flag == 1){
 8001396:	4b59      	ldr	r3, [pc, #356]	; (80014fc <fsm_simple_buttons_run+0x6e0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d105      	bne.n	80013aa <fsm_simple_buttons_run+0x58e>
					RESET_flag = 0;
 800139e:	4b57      	ldr	r3, [pc, #348]	; (80014fc <fsm_simple_buttons_run+0x6e0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
					status = BUT0;
 80013a4:	4b56      	ldr	r3, [pc, #344]	; (8001500 <fsm_simple_buttons_run+0x6e4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]

				}if(INC_flag == 1){
 80013aa:	4b56      	ldr	r3, [pc, #344]	; (8001504 <fsm_simple_buttons_run+0x6e8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d108      	bne.n	80013c4 <fsm_simple_buttons_run+0x5a8>
					INC_flag = 0;
 80013b2:	4b54      	ldr	r3, [pc, #336]	; (8001504 <fsm_simple_buttons_run+0x6e8>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
					status = BUT9;
 80013b8:	4b51      	ldr	r3, [pc, #324]	; (8001500 <fsm_simple_buttons_run+0x6e4>)
 80013ba:	2209      	movs	r2, #9
 80013bc:	601a      	str	r2, [r3, #0]
					setTimer2(200);
 80013be:	20c8      	movs	r0, #200	; 0xc8
 80013c0:	f000 f9c8 	bl	8001754 <setTimer2>
				}
				if(DEC_flag == 1){
 80013c4:	4b50      	ldr	r3, [pc, #320]	; (8001508 <fsm_simple_buttons_run+0x6ec>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d108      	bne.n	80013de <fsm_simple_buttons_run+0x5c2>
					DEC_flag = 0;
 80013cc:	4b4e      	ldr	r3, [pc, #312]	; (8001508 <fsm_simple_buttons_run+0x6ec>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
					status = BUT7;
 80013d2:	4b4b      	ldr	r3, [pc, #300]	; (8001500 <fsm_simple_buttons_run+0x6e4>)
 80013d4:	2207      	movs	r2, #7
 80013d6:	601a      	str	r2, [r3, #0]
					setTimer2(200);
 80013d8:	20c8      	movs	r0, #200	; 0xc8
 80013da:	f000 f9bb 	bl	8001754 <setTimer2>
				}
				if(timer2_flag == 1){
 80013de:	4b4b      	ldr	r3, [pc, #300]	; (800150c <fsm_simple_buttons_run+0x6f0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d108      	bne.n	80013f8 <fsm_simple_buttons_run+0x5dc>
					timer2_flag = 0;
 80013e6:	4b49      	ldr	r3, [pc, #292]	; (800150c <fsm_simple_buttons_run+0x6f0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
					status = AUTO_8;
 80013ec:	4b44      	ldr	r3, [pc, #272]	; (8001500 <fsm_simple_buttons_run+0x6e4>)
 80013ee:	2212      	movs	r2, #18
 80013f0:	601a      	str	r2, [r3, #0]
					setTimer2(200);
 80013f2:	20c8      	movs	r0, #200	; 0xc8
 80013f4:	f000 f9ae 	bl	8001754 <setTimer2>
				}
				if(INC_flag1 == 1){
 80013f8:	4b45      	ldr	r3, [pc, #276]	; (8001510 <fsm_simple_buttons_run+0x6f4>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d108      	bne.n	8001412 <fsm_simple_buttons_run+0x5f6>
					INC_flag1 = 0;
 8001400:	4b43      	ldr	r3, [pc, #268]	; (8001510 <fsm_simple_buttons_run+0x6f4>)
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
					status = LONG_8;
 8001406:	4b3e      	ldr	r3, [pc, #248]	; (8001500 <fsm_simple_buttons_run+0x6e4>)
 8001408:	221c      	movs	r2, #28
 800140a:	601a      	str	r2, [r3, #0]
					setTimer1(100);
 800140c:	2064      	movs	r0, #100	; 0x64
 800140e:	f000 f98d 	bl	800172c <setTimer1>
				}
				if(DEC_flag1 == 1){
 8001412:	4b40      	ldr	r3, [pc, #256]	; (8001514 <fsm_simple_buttons_run+0x6f8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d16a      	bne.n	80014f0 <fsm_simple_buttons_run+0x6d4>
					DEC_flag1 = 0;
 800141a:	4b3e      	ldr	r3, [pc, #248]	; (8001514 <fsm_simple_buttons_run+0x6f8>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
					status = LONG_8;
 8001420:	4b37      	ldr	r3, [pc, #220]	; (8001500 <fsm_simple_buttons_run+0x6e4>)
 8001422:	221c      	movs	r2, #28
 8001424:	601a      	str	r2, [r3, #0]
					setTimer1(100);
 8001426:	2064      	movs	r0, #100	; 0x64
 8001428:	f000 f980 	bl	800172c <setTimer1>
				}
		break;
 800142c:	e060      	b.n	80014f0 <fsm_simple_buttons_run+0x6d4>
	case BUT9:
		//TODO
		display7SEG(9);
 800142e:	2009      	movs	r0, #9
 8001430:	f7fe ffea 	bl	8000408 <display7SEG>
		if(RESET_flag == 1){
 8001434:	4b31      	ldr	r3, [pc, #196]	; (80014fc <fsm_simple_buttons_run+0x6e0>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d105      	bne.n	8001448 <fsm_simple_buttons_run+0x62c>
					RESET_flag = 0;
 800143c:	4b2f      	ldr	r3, [pc, #188]	; (80014fc <fsm_simple_buttons_run+0x6e0>)
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
					status = BUT0;
 8001442:	4b2f      	ldr	r3, [pc, #188]	; (8001500 <fsm_simple_buttons_run+0x6e4>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]

				}if(INC_flag == 1){
 8001448:	4b2e      	ldr	r3, [pc, #184]	; (8001504 <fsm_simple_buttons_run+0x6e8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d108      	bne.n	8001462 <fsm_simple_buttons_run+0x646>
					INC_flag = 0;
 8001450:	4b2c      	ldr	r3, [pc, #176]	; (8001504 <fsm_simple_buttons_run+0x6e8>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
					status = BUT0;
 8001456:	4b2a      	ldr	r3, [pc, #168]	; (8001500 <fsm_simple_buttons_run+0x6e4>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
					setTimer2(200);
 800145c:	20c8      	movs	r0, #200	; 0xc8
 800145e:	f000 f979 	bl	8001754 <setTimer2>
				}
				if(DEC_flag == 1){
 8001462:	4b29      	ldr	r3, [pc, #164]	; (8001508 <fsm_simple_buttons_run+0x6ec>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d108      	bne.n	800147c <fsm_simple_buttons_run+0x660>
					DEC_flag = 0;
 800146a:	4b27      	ldr	r3, [pc, #156]	; (8001508 <fsm_simple_buttons_run+0x6ec>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
					status = BUT8;
 8001470:	4b23      	ldr	r3, [pc, #140]	; (8001500 <fsm_simple_buttons_run+0x6e4>)
 8001472:	2208      	movs	r2, #8
 8001474:	601a      	str	r2, [r3, #0]
					setTimer2(200);
 8001476:	20c8      	movs	r0, #200	; 0xc8
 8001478:	f000 f96c 	bl	8001754 <setTimer2>
				}
				if(timer2_flag == 1){
 800147c:	4b23      	ldr	r3, [pc, #140]	; (800150c <fsm_simple_buttons_run+0x6f0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d108      	bne.n	8001496 <fsm_simple_buttons_run+0x67a>
					timer2_flag = 0;
 8001484:	4b21      	ldr	r3, [pc, #132]	; (800150c <fsm_simple_buttons_run+0x6f0>)
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
					status = AUTO_9;
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <fsm_simple_buttons_run+0x6e4>)
 800148c:	2213      	movs	r2, #19
 800148e:	601a      	str	r2, [r3, #0]
					setTimer2(200);
 8001490:	20c8      	movs	r0, #200	; 0xc8
 8001492:	f000 f95f 	bl	8001754 <setTimer2>
				}
				if(INC_flag1 == 1){
 8001496:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <fsm_simple_buttons_run+0x6f4>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d108      	bne.n	80014b0 <fsm_simple_buttons_run+0x694>
					INC_flag1 = 0;
 800149e:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <fsm_simple_buttons_run+0x6f4>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
					status = LONG_9;
 80014a4:	4b16      	ldr	r3, [pc, #88]	; (8001500 <fsm_simple_buttons_run+0x6e4>)
 80014a6:	221d      	movs	r2, #29
 80014a8:	601a      	str	r2, [r3, #0]
					setTimer1(100);
 80014aa:	2064      	movs	r0, #100	; 0x64
 80014ac:	f000 f93e 	bl	800172c <setTimer1>
				}
				if(DEC_flag1 == 1){
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <fsm_simple_buttons_run+0x6f8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d11d      	bne.n	80014f4 <fsm_simple_buttons_run+0x6d8>
					DEC_flag1 = 0;
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <fsm_simple_buttons_run+0x6f8>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
					status = LONG_9;
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <fsm_simple_buttons_run+0x6e4>)
 80014c0:	221d      	movs	r2, #29
 80014c2:	601a      	str	r2, [r3, #0]
					setTimer1(100);
 80014c4:	2064      	movs	r0, #100	; 0x64
 80014c6:	f000 f931 	bl	800172c <setTimer1>
				}
		break;
 80014ca:	e013      	b.n	80014f4 <fsm_simple_buttons_run+0x6d8>
	default:
		break;
 80014cc:	bf00      	nop
 80014ce:	e012      	b.n	80014f6 <fsm_simple_buttons_run+0x6da>
		break;
 80014d0:	bf00      	nop
 80014d2:	e010      	b.n	80014f6 <fsm_simple_buttons_run+0x6da>
		break;
 80014d4:	bf00      	nop
 80014d6:	e00e      	b.n	80014f6 <fsm_simple_buttons_run+0x6da>
		break;
 80014d8:	bf00      	nop
 80014da:	e00c      	b.n	80014f6 <fsm_simple_buttons_run+0x6da>
				break;
 80014dc:	bf00      	nop
 80014de:	e00a      	b.n	80014f6 <fsm_simple_buttons_run+0x6da>
		break;
 80014e0:	bf00      	nop
 80014e2:	e008      	b.n	80014f6 <fsm_simple_buttons_run+0x6da>
		break;
 80014e4:	bf00      	nop
 80014e6:	e006      	b.n	80014f6 <fsm_simple_buttons_run+0x6da>
		break;
 80014e8:	bf00      	nop
 80014ea:	e004      	b.n	80014f6 <fsm_simple_buttons_run+0x6da>
		break;
 80014ec:	bf00      	nop
 80014ee:	e002      	b.n	80014f6 <fsm_simple_buttons_run+0x6da>
		break;
 80014f0:	bf00      	nop
 80014f2:	e000      	b.n	80014f6 <fsm_simple_buttons_run+0x6da>
		break;
 80014f4:	bf00      	nop
		}
	}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2000005c 	.word	0x2000005c
 8001500:	20000070 	.word	0x20000070
 8001504:	20000060 	.word	0x20000060
 8001508:	20000068 	.word	0x20000068
 800150c:	20000088 	.word	0x20000088
 8001510:	20000064 	.word	0x20000064
 8001514:	2000006c 	.word	0x2000006c

08001518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800151c:	f000 fa28 	bl	8001970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001520:	f000 f818 	bl	8001554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001524:	f000 f89e 	bl	8001664 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001528:	f000 f850 	bl	80015cc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800152c:	4807      	ldr	r0, [pc, #28]	; (800154c <main+0x34>)
 800152e:	f001 f971 	bl	8002814 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
status = BUT0;
 8001532:	4b07      	ldr	r3, [pc, #28]	; (8001550 <main+0x38>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_simple_buttons_run();
 8001538:	f7ff fc70 	bl	8000e1c <fsm_simple_buttons_run>
	  fsm_LedBlinky_run();
 800153c:	f7fe fe06 	bl	800014c <fsm_LedBlinky_run>
	  fsm_auto_run();
 8001540:	f7ff f8f2 	bl	8000728 <fsm_auto_run>
	  fsm_long_run();
 8001544:	f7ff fb32 	bl	8000bac <fsm_long_run>
	  fsm_simple_buttons_run();
 8001548:	e7f6      	b.n	8001538 <main+0x20>
 800154a:	bf00      	nop
 800154c:	20000090 	.word	0x20000090
 8001550:	20000070 	.word	0x20000070

08001554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b090      	sub	sp, #64	; 0x40
 8001558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800155a:	f107 0318 	add.w	r3, r7, #24
 800155e:	2228      	movs	r2, #40	; 0x28
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f001 fd0e 	bl	8002f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001576:	2302      	movs	r3, #2
 8001578:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800157a:	2301      	movs	r3, #1
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800157e:	2310      	movs	r3, #16
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001582:	2300      	movs	r3, #0
 8001584:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001586:	f107 0318 	add.w	r3, r7, #24
 800158a:	4618      	mov	r0, r3
 800158c:	f000 fd0a 	bl	8001fa4 <HAL_RCC_OscConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001596:	f000 f8c3 	bl	8001720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800159a:	230f      	movs	r3, #15
 800159c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 ff76 	bl	80024a4 <HAL_RCC_ClockConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015be:	f000 f8af 	bl	8001720 <Error_Handler>
  }
}
 80015c2:	bf00      	nop
 80015c4:	3740      	adds	r7, #64	; 0x40
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d2:	f107 0308 	add.w	r3, r7, #8
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e0:	463b      	mov	r3, r7
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015e8:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <MX_TIM2_Init+0x94>)
 80015ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80015f0:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <MX_TIM2_Init+0x94>)
 80015f2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80015f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f8:	4b19      	ldr	r3, [pc, #100]	; (8001660 <MX_TIM2_Init+0x94>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80015fe:	4b18      	ldr	r3, [pc, #96]	; (8001660 <MX_TIM2_Init+0x94>)
 8001600:	2209      	movs	r2, #9
 8001602:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001604:	4b16      	ldr	r3, [pc, #88]	; (8001660 <MX_TIM2_Init+0x94>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <MX_TIM2_Init+0x94>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001610:	4813      	ldr	r0, [pc, #76]	; (8001660 <MX_TIM2_Init+0x94>)
 8001612:	f001 f8af 	bl	8002774 <HAL_TIM_Base_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800161c:	f000 f880 	bl	8001720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001624:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001626:	f107 0308 	add.w	r3, r7, #8
 800162a:	4619      	mov	r1, r3
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <MX_TIM2_Init+0x94>)
 800162e:	f001 fa45 	bl	8002abc <HAL_TIM_ConfigClockSource>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001638:	f000 f872 	bl	8001720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163c:	2300      	movs	r3, #0
 800163e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001644:	463b      	mov	r3, r7
 8001646:	4619      	mov	r1, r3
 8001648:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_TIM2_Init+0x94>)
 800164a:	f001 fc0d 	bl	8002e68 <HAL_TIMEx_MasterConfigSynchronization>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001654:	f000 f864 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000090 	.word	0x20000090

08001664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001678:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <MX_GPIO_Init+0x90>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	4a1d      	ldr	r2, [pc, #116]	; (80016f4 <MX_GPIO_Init+0x90>)
 800167e:	f043 0310 	orr.w	r3, r3, #16
 8001682:	6193      	str	r3, [r2, #24]
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <MX_GPIO_Init+0x90>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001690:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <MX_GPIO_Init+0x90>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	4a17      	ldr	r2, [pc, #92]	; (80016f4 <MX_GPIO_Init+0x90>)
 8001696:	f043 0304 	orr.w	r3, r3, #4
 800169a:	6193      	str	r3, [r2, #24]
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <MX_GPIO_Init+0x90>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED7_0_Pin|LED7_1_Pin|LED7_2_Pin|LED7_3_Pin
 80016a8:	2200      	movs	r2, #0
 80016aa:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80016ae:	4812      	ldr	r0, [pc, #72]	; (80016f8 <MX_GPIO_Init+0x94>)
 80016b0:	f000 fc5f 	bl	8001f72 <HAL_GPIO_WritePin>
                          |LED7_4_Pin|LED7_5_Pin|LED7_6_Pin|LED_RED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RESET_Pin INC_Pin DEC_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|INC_Pin|DEC_Pin;
 80016b4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80016b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016be:	2301      	movs	r3, #1
 80016c0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	4619      	mov	r1, r3
 80016c8:	480c      	ldr	r0, [pc, #48]	; (80016fc <MX_GPIO_Init+0x98>)
 80016ca:	f000 fac1 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7_0_Pin LED7_1_Pin LED7_2_Pin LED7_3_Pin
                           LED7_4_Pin LED7_5_Pin LED7_6_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED7_0_Pin|LED7_1_Pin|LED7_2_Pin|LED7_3_Pin
 80016ce:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80016d2:	60bb      	str	r3, [r7, #8]
                          |LED7_4_Pin|LED7_5_Pin|LED7_6_Pin|LED_RED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2302      	movs	r3, #2
 80016de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	4619      	mov	r1, r3
 80016e6:	4804      	ldr	r0, [pc, #16]	; (80016f8 <MX_GPIO_Init+0x94>)
 80016e8:	f000 fab2 	bl	8001c50 <HAL_GPIO_Init>

}
 80016ec:	bf00      	nop
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010800 	.word	0x40010800
 80016fc:	40011000 	.word	0x40011000

08001700 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	timerRun();
 8001708:	f000 f84c 	bl	80017a4 <timerRun>
	getKeyInput();
 800170c:	f7fe fd8a 	bl	8000224 <getKeyInput>
	getKeyInput1();
 8001710:	f7fe fdd6 	bl	80002c0 <getKeyInput1>
	getKeyInput2();
 8001714:	f7fe fe26 	bl	8000364 <getKeyInput2>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001724:	b672      	cpsid	i
}
 8001726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001728:	e7fe      	b.n	8001728 <Error_Handler+0x8>
	...

0800172c <setTimer1>:

int timer1_flag = 0;
int timer2_flag = 0;
int timer3_flag = 0;

void setTimer1(int duration){
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001734:	4a05      	ldr	r2, [pc, #20]	; (800174c <setTimer1+0x20>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800173a:	4b05      	ldr	r3, [pc, #20]	; (8001750 <setTimer1+0x24>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20000078 	.word	0x20000078
 8001750:	20000084 	.word	0x20000084

08001754 <setTimer2>:
void setTimer2(int duration){
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 800175c:	4a05      	ldr	r2, [pc, #20]	; (8001774 <setTimer2+0x20>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001762:	4b05      	ldr	r3, [pc, #20]	; (8001778 <setTimer2+0x24>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	2000007c 	.word	0x2000007c
 8001778:	20000088 	.word	0x20000088

0800177c <setTimer3>:
void setTimer3(int duration){
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8001784:	4a05      	ldr	r2, [pc, #20]	; (800179c <setTimer3+0x20>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <setTimer3+0x24>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000080 	.word	0x20000080
 80017a0:	2000008c 	.word	0x2000008c

080017a4 <timerRun>:
void timerRun(){
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
	if(timer1_counter){
 80017a8:	4b19      	ldr	r3, [pc, #100]	; (8001810 <timerRun+0x6c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d004      	beq.n	80017ba <timerRun+0x16>
		timer1_counter--;
 80017b0:	4b17      	ldr	r3, [pc, #92]	; (8001810 <timerRun+0x6c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	4a16      	ldr	r2, [pc, #88]	; (8001810 <timerRun+0x6c>)
 80017b8:	6013      	str	r3, [r2, #0]
	}if(timer1_counter <=0){
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <timerRun+0x6c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	dc02      	bgt.n	80017c8 <timerRun+0x24>
		timer1_flag = 1;
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <timerRun+0x70>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter){
 80017c8:	4b13      	ldr	r3, [pc, #76]	; (8001818 <timerRun+0x74>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d004      	beq.n	80017da <timerRun+0x36>
		timer2_counter--;
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <timerRun+0x74>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	4a10      	ldr	r2, [pc, #64]	; (8001818 <timerRun+0x74>)
 80017d8:	6013      	str	r3, [r2, #0]
	}	if(timer2_counter <=0){
 80017da:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <timerRun+0x74>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	dc02      	bgt.n	80017e8 <timerRun+0x44>
		timer2_flag = 1;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <timerRun+0x78>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter){
 80017e8:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <timerRun+0x7c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d004      	beq.n	80017fa <timerRun+0x56>
		timer3_counter--;
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <timerRun+0x7c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <timerRun+0x7c>)
 80017f8:	6013      	str	r3, [r2, #0]
	}	if(timer3_counter <=0){
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <timerRun+0x7c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	dc02      	bgt.n	8001808 <timerRun+0x64>
			timer3_flag = 1;
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <timerRun+0x80>)
 8001804:	2201      	movs	r2, #1
 8001806:	601a      	str	r2, [r3, #0]
		}
	}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	20000078 	.word	0x20000078
 8001814:	20000084 	.word	0x20000084
 8001818:	2000007c 	.word	0x2000007c
 800181c:	20000088 	.word	0x20000088
 8001820:	20000080 	.word	0x20000080
 8001824:	2000008c 	.word	0x2000008c

08001828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <HAL_MspInit+0x40>)
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <HAL_MspInit+0x40>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6193      	str	r3, [r2, #24]
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <HAL_MspInit+0x40>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <HAL_MspInit+0x40>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	4a07      	ldr	r2, [pc, #28]	; (8001868 <HAL_MspInit+0x40>)
 800184c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001850:	61d3      	str	r3, [r2, #28]
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <HAL_MspInit+0x40>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	40021000 	.word	0x40021000

0800186c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800187c:	d113      	bne.n	80018a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_TIM_Base_MspInit+0x44>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	4a0b      	ldr	r2, [pc, #44]	; (80018b0 <HAL_TIM_Base_MspInit+0x44>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	61d3      	str	r3, [r2, #28]
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_TIM_Base_MspInit+0x44>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2100      	movs	r1, #0
 800189a:	201c      	movs	r0, #28
 800189c:	f000 f9a1 	bl	8001be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018a0:	201c      	movs	r0, #28
 80018a2:	f000 f9ba 	bl	8001c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000

080018b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <NMI_Handler+0x4>

080018ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018be:	e7fe      	b.n	80018be <HardFault_Handler+0x4>

080018c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <MemManage_Handler+0x4>

080018c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <BusFault_Handler+0x4>

080018cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <UsageFault_Handler+0x4>

080018d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr

080018de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr

080018ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr

080018f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018fa:	f000 f87f 	bl	80019fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <TIM2_IRQHandler+0x10>)
 800190a:	f000 ffcf 	bl	80028ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000090 	.word	0x20000090

08001918 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001924:	480c      	ldr	r0, [pc, #48]	; (8001958 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001926:	490d      	ldr	r1, [pc, #52]	; (800195c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001928:	4a0d      	ldr	r2, [pc, #52]	; (8001960 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800192c:	e002      	b.n	8001934 <LoopCopyDataInit>

0800192e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001932:	3304      	adds	r3, #4

08001934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001938:	d3f9      	bcc.n	800192e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193a:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800193c:	4c0a      	ldr	r4, [pc, #40]	; (8001968 <LoopFillZerobss+0x22>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001940:	e001      	b.n	8001946 <LoopFillZerobss>

08001942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001944:	3204      	adds	r2, #4

08001946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001948:	d3fb      	bcc.n	8001942 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800194a:	f7ff ffe5 	bl	8001918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800194e:	f001 faf5 	bl	8002f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001952:	f7ff fde1 	bl	8001518 <main>
  bx lr
 8001956:	4770      	bx	lr
  ldr r0, =_sdata
 8001958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800195c:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8001960:	08002fd4 	.word	0x08002fd4
  ldr r2, =_sbss
 8001964:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001968:	200000dc 	.word	0x200000dc

0800196c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800196c:	e7fe      	b.n	800196c <ADC1_2_IRQHandler>
	...

08001970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <HAL_Init+0x28>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a07      	ldr	r2, [pc, #28]	; (8001998 <HAL_Init+0x28>)
 800197a:	f043 0310 	orr.w	r3, r3, #16
 800197e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001980:	2003      	movs	r0, #3
 8001982:	f000 f923 	bl	8001bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001986:	200f      	movs	r0, #15
 8001988:	f000 f808 	bl	800199c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800198c:	f7ff ff4c 	bl	8001828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40022000 	.word	0x40022000

0800199c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_InitTick+0x54>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_InitTick+0x58>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4619      	mov	r1, r3
 80019ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 f93b 	bl	8001c36 <HAL_SYSTICK_Config>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00e      	b.n	80019e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b0f      	cmp	r3, #15
 80019ce:	d80a      	bhi.n	80019e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d0:	2200      	movs	r2, #0
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	f000 f903 	bl	8001be2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019dc:	4a06      	ldr	r2, [pc, #24]	; (80019f8 <HAL_InitTick+0x5c>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e000      	b.n	80019e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000034 	.word	0x20000034
 80019f4:	2000003c 	.word	0x2000003c
 80019f8:	20000038 	.word	0x20000038

080019fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_IncTick+0x1c>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_IncTick+0x20>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	4a03      	ldr	r2, [pc, #12]	; (8001a1c <HAL_IncTick+0x20>)
 8001a0e:	6013      	str	r3, [r2, #0]
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr
 8001a18:	2000003c 	.word	0x2000003c
 8001a1c:	200000d8 	.word	0x200000d8

08001a20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return uwTick;
 8001a24:	4b02      	ldr	r3, [pc, #8]	; (8001a30 <HAL_GetTick+0x10>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	200000d8 	.word	0x200000d8

08001a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a50:	4013      	ands	r3, r2
 8001a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a66:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	60d3      	str	r3, [r2, #12]
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <__NVIC_GetPriorityGrouping+0x18>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	f003 0307 	and.w	r3, r3, #7
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	db0b      	blt.n	8001ac2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	f003 021f 	and.w	r2, r3, #31
 8001ab0:	4906      	ldr	r1, [pc, #24]	; (8001acc <__NVIC_EnableIRQ+0x34>)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	095b      	lsrs	r3, r3, #5
 8001ab8:	2001      	movs	r0, #1
 8001aba:	fa00 f202 	lsl.w	r2, r0, r2
 8001abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	e000e100 	.word	0xe000e100

08001ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	db0a      	blt.n	8001afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	490c      	ldr	r1, [pc, #48]	; (8001b1c <__NVIC_SetPriority+0x4c>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	440b      	add	r3, r1
 8001af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af8:	e00a      	b.n	8001b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4908      	ldr	r1, [pc, #32]	; (8001b20 <__NVIC_SetPriority+0x50>)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	3b04      	subs	r3, #4
 8001b08:	0112      	lsls	r2, r2, #4
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	761a      	strb	r2, [r3, #24]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000e100 	.word	0xe000e100
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f1c3 0307 	rsb	r3, r3, #7
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	bf28      	it	cs
 8001b42:	2304      	movcs	r3, #4
 8001b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d902      	bls.n	8001b54 <NVIC_EncodePriority+0x30>
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3b03      	subs	r3, #3
 8001b52:	e000      	b.n	8001b56 <NVIC_EncodePriority+0x32>
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43da      	mvns	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	401a      	ands	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	4313      	orrs	r3, r2
         );
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3724      	adds	r7, #36	; 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b98:	d301      	bcc.n	8001b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e00f      	b.n	8001bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <SysTick_Config+0x40>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba6:	210f      	movs	r1, #15
 8001ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bac:	f7ff ff90 	bl	8001ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <SysTick_Config+0x40>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb6:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <SysTick_Config+0x40>)
 8001bb8:	2207      	movs	r2, #7
 8001bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	e000e010 	.word	0xe000e010

08001bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff ff2d 	bl	8001a34 <__NVIC_SetPriorityGrouping>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf4:	f7ff ff42 	bl	8001a7c <__NVIC_GetPriorityGrouping>
 8001bf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	6978      	ldr	r0, [r7, #20]
 8001c00:	f7ff ff90 	bl	8001b24 <NVIC_EncodePriority>
 8001c04:	4602      	mov	r2, r0
 8001c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff5f 	bl	8001ad0 <__NVIC_SetPriority>
}
 8001c12:	bf00      	nop
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff35 	bl	8001a98 <__NVIC_EnableIRQ>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff ffa2 	bl	8001b88 <SysTick_Config>
 8001c44:	4603      	mov	r3, r0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b08b      	sub	sp, #44	; 0x2c
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c62:	e148      	b.n	8001ef6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c64:	2201      	movs	r2, #1
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	69fa      	ldr	r2, [r7, #28]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	f040 8137 	bne.w	8001ef0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	4aa3      	ldr	r2, [pc, #652]	; (8001f14 <HAL_GPIO_Init+0x2c4>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d05e      	beq.n	8001d4a <HAL_GPIO_Init+0xfa>
 8001c8c:	4aa1      	ldr	r2, [pc, #644]	; (8001f14 <HAL_GPIO_Init+0x2c4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d875      	bhi.n	8001d7e <HAL_GPIO_Init+0x12e>
 8001c92:	4aa1      	ldr	r2, [pc, #644]	; (8001f18 <HAL_GPIO_Init+0x2c8>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d058      	beq.n	8001d4a <HAL_GPIO_Init+0xfa>
 8001c98:	4a9f      	ldr	r2, [pc, #636]	; (8001f18 <HAL_GPIO_Init+0x2c8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d86f      	bhi.n	8001d7e <HAL_GPIO_Init+0x12e>
 8001c9e:	4a9f      	ldr	r2, [pc, #636]	; (8001f1c <HAL_GPIO_Init+0x2cc>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d052      	beq.n	8001d4a <HAL_GPIO_Init+0xfa>
 8001ca4:	4a9d      	ldr	r2, [pc, #628]	; (8001f1c <HAL_GPIO_Init+0x2cc>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d869      	bhi.n	8001d7e <HAL_GPIO_Init+0x12e>
 8001caa:	4a9d      	ldr	r2, [pc, #628]	; (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d04c      	beq.n	8001d4a <HAL_GPIO_Init+0xfa>
 8001cb0:	4a9b      	ldr	r2, [pc, #620]	; (8001f20 <HAL_GPIO_Init+0x2d0>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d863      	bhi.n	8001d7e <HAL_GPIO_Init+0x12e>
 8001cb6:	4a9b      	ldr	r2, [pc, #620]	; (8001f24 <HAL_GPIO_Init+0x2d4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d046      	beq.n	8001d4a <HAL_GPIO_Init+0xfa>
 8001cbc:	4a99      	ldr	r2, [pc, #612]	; (8001f24 <HAL_GPIO_Init+0x2d4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d85d      	bhi.n	8001d7e <HAL_GPIO_Init+0x12e>
 8001cc2:	2b12      	cmp	r3, #18
 8001cc4:	d82a      	bhi.n	8001d1c <HAL_GPIO_Init+0xcc>
 8001cc6:	2b12      	cmp	r3, #18
 8001cc8:	d859      	bhi.n	8001d7e <HAL_GPIO_Init+0x12e>
 8001cca:	a201      	add	r2, pc, #4	; (adr r2, 8001cd0 <HAL_GPIO_Init+0x80>)
 8001ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd0:	08001d4b 	.word	0x08001d4b
 8001cd4:	08001d25 	.word	0x08001d25
 8001cd8:	08001d37 	.word	0x08001d37
 8001cdc:	08001d79 	.word	0x08001d79
 8001ce0:	08001d7f 	.word	0x08001d7f
 8001ce4:	08001d7f 	.word	0x08001d7f
 8001ce8:	08001d7f 	.word	0x08001d7f
 8001cec:	08001d7f 	.word	0x08001d7f
 8001cf0:	08001d7f 	.word	0x08001d7f
 8001cf4:	08001d7f 	.word	0x08001d7f
 8001cf8:	08001d7f 	.word	0x08001d7f
 8001cfc:	08001d7f 	.word	0x08001d7f
 8001d00:	08001d7f 	.word	0x08001d7f
 8001d04:	08001d7f 	.word	0x08001d7f
 8001d08:	08001d7f 	.word	0x08001d7f
 8001d0c:	08001d7f 	.word	0x08001d7f
 8001d10:	08001d7f 	.word	0x08001d7f
 8001d14:	08001d2d 	.word	0x08001d2d
 8001d18:	08001d41 	.word	0x08001d41
 8001d1c:	4a82      	ldr	r2, [pc, #520]	; (8001f28 <HAL_GPIO_Init+0x2d8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d013      	beq.n	8001d4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d22:	e02c      	b.n	8001d7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	623b      	str	r3, [r7, #32]
          break;
 8001d2a:	e029      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	3304      	adds	r3, #4
 8001d32:	623b      	str	r3, [r7, #32]
          break;
 8001d34:	e024      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	3308      	adds	r3, #8
 8001d3c:	623b      	str	r3, [r7, #32]
          break;
 8001d3e:	e01f      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	330c      	adds	r3, #12
 8001d46:	623b      	str	r3, [r7, #32]
          break;
 8001d48:	e01a      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d102      	bne.n	8001d58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d52:	2304      	movs	r3, #4
 8001d54:	623b      	str	r3, [r7, #32]
          break;
 8001d56:	e013      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d105      	bne.n	8001d6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d60:	2308      	movs	r3, #8
 8001d62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	611a      	str	r2, [r3, #16]
          break;
 8001d6a:	e009      	b.n	8001d80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d6c:	2308      	movs	r3, #8
 8001d6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69fa      	ldr	r2, [r7, #28]
 8001d74:	615a      	str	r2, [r3, #20]
          break;
 8001d76:	e003      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	623b      	str	r3, [r7, #32]
          break;
 8001d7c:	e000      	b.n	8001d80 <HAL_GPIO_Init+0x130>
          break;
 8001d7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2bff      	cmp	r3, #255	; 0xff
 8001d84:	d801      	bhi.n	8001d8a <HAL_GPIO_Init+0x13a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	e001      	b.n	8001d8e <HAL_GPIO_Init+0x13e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2bff      	cmp	r3, #255	; 0xff
 8001d94:	d802      	bhi.n	8001d9c <HAL_GPIO_Init+0x14c>
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	e002      	b.n	8001da2 <HAL_GPIO_Init+0x152>
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	3b08      	subs	r3, #8
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	210f      	movs	r1, #15
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	fa01 f303 	lsl.w	r3, r1, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	401a      	ands	r2, r3
 8001db4:	6a39      	ldr	r1, [r7, #32]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8090 	beq.w	8001ef0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dd0:	4b56      	ldr	r3, [pc, #344]	; (8001f2c <HAL_GPIO_Init+0x2dc>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	4a55      	ldr	r2, [pc, #340]	; (8001f2c <HAL_GPIO_Init+0x2dc>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6193      	str	r3, [r2, #24]
 8001ddc:	4b53      	ldr	r3, [pc, #332]	; (8001f2c <HAL_GPIO_Init+0x2dc>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001de8:	4a51      	ldr	r2, [pc, #324]	; (8001f30 <HAL_GPIO_Init+0x2e0>)
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	089b      	lsrs	r3, r3, #2
 8001dee:	3302      	adds	r3, #2
 8001df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	220f      	movs	r2, #15
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a49      	ldr	r2, [pc, #292]	; (8001f34 <HAL_GPIO_Init+0x2e4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d00d      	beq.n	8001e30 <HAL_GPIO_Init+0x1e0>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a48      	ldr	r2, [pc, #288]	; (8001f38 <HAL_GPIO_Init+0x2e8>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d007      	beq.n	8001e2c <HAL_GPIO_Init+0x1dc>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a47      	ldr	r2, [pc, #284]	; (8001f3c <HAL_GPIO_Init+0x2ec>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d101      	bne.n	8001e28 <HAL_GPIO_Init+0x1d8>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e004      	b.n	8001e32 <HAL_GPIO_Init+0x1e2>
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e002      	b.n	8001e32 <HAL_GPIO_Init+0x1e2>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <HAL_GPIO_Init+0x1e2>
 8001e30:	2300      	movs	r3, #0
 8001e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e34:	f002 0203 	and.w	r2, r2, #3
 8001e38:	0092      	lsls	r2, r2, #2
 8001e3a:	4093      	lsls	r3, r2
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e42:	493b      	ldr	r1, [pc, #236]	; (8001f30 <HAL_GPIO_Init+0x2e0>)
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	089b      	lsrs	r3, r3, #2
 8001e48:	3302      	adds	r3, #2
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d006      	beq.n	8001e6a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e5c:	4b38      	ldr	r3, [pc, #224]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4937      	ldr	r1, [pc, #220]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	600b      	str	r3, [r1, #0]
 8001e68:	e006      	b.n	8001e78 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e6a:	4b35      	ldr	r3, [pc, #212]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	4933      	ldr	r1, [pc, #204]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d006      	beq.n	8001e92 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e84:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	492d      	ldr	r1, [pc, #180]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]
 8001e90:	e006      	b.n	8001ea0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e92:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	4929      	ldr	r1, [pc, #164]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d006      	beq.n	8001eba <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001eac:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	4923      	ldr	r1, [pc, #140]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	608b      	str	r3, [r1, #8]
 8001eb8:	e006      	b.n	8001ec8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eba:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	491f      	ldr	r1, [pc, #124]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d006      	beq.n	8001ee2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	4919      	ldr	r1, [pc, #100]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	60cb      	str	r3, [r1, #12]
 8001ee0:	e006      	b.n	8001ef0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ee2:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	4915      	ldr	r1, [pc, #84]	; (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	fa22 f303 	lsr.w	r3, r2, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f47f aeaf 	bne.w	8001c64 <HAL_GPIO_Init+0x14>
  }
}
 8001f06:	bf00      	nop
 8001f08:	bf00      	nop
 8001f0a:	372c      	adds	r7, #44	; 0x2c
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	10320000 	.word	0x10320000
 8001f18:	10310000 	.word	0x10310000
 8001f1c:	10220000 	.word	0x10220000
 8001f20:	10210000 	.word	0x10210000
 8001f24:	10120000 	.word	0x10120000
 8001f28:	10110000 	.word	0x10110000
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40010000 	.word	0x40010000
 8001f34:	40010800 	.word	0x40010800
 8001f38:	40010c00 	.word	0x40010c00
 8001f3c:	40011000 	.word	0x40011000
 8001f40:	40010400 	.word	0x40010400

08001f44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	887b      	ldrh	r3, [r7, #2]
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
 8001f60:	e001      	b.n	8001f66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f62:	2300      	movs	r3, #0
 8001f64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr

08001f72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	807b      	strh	r3, [r7, #2]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f82:	787b      	ldrb	r3, [r7, #1]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f88:	887a      	ldrh	r2, [r7, #2]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f8e:	e003      	b.n	8001f98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f90:	887b      	ldrh	r3, [r7, #2]
 8001f92:	041a      	lsls	r2, r3, #16
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	611a      	str	r2, [r3, #16]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
	...

08001fa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e26c      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 8087 	beq.w	80020d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fc4:	4b92      	ldr	r3, [pc, #584]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 030c 	and.w	r3, r3, #12
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d00c      	beq.n	8001fea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fd0:	4b8f      	ldr	r3, [pc, #572]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 030c 	and.w	r3, r3, #12
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d112      	bne.n	8002002 <HAL_RCC_OscConfig+0x5e>
 8001fdc:	4b8c      	ldr	r3, [pc, #560]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe8:	d10b      	bne.n	8002002 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fea:	4b89      	ldr	r3, [pc, #548]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d06c      	beq.n	80020d0 <HAL_RCC_OscConfig+0x12c>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d168      	bne.n	80020d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e246      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200a:	d106      	bne.n	800201a <HAL_RCC_OscConfig+0x76>
 800200c:	4b80      	ldr	r3, [pc, #512]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a7f      	ldr	r2, [pc, #508]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	e02e      	b.n	8002078 <HAL_RCC_OscConfig+0xd4>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10c      	bne.n	800203c <HAL_RCC_OscConfig+0x98>
 8002022:	4b7b      	ldr	r3, [pc, #492]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a7a      	ldr	r2, [pc, #488]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	4b78      	ldr	r3, [pc, #480]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a77      	ldr	r2, [pc, #476]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002034:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	e01d      	b.n	8002078 <HAL_RCC_OscConfig+0xd4>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002044:	d10c      	bne.n	8002060 <HAL_RCC_OscConfig+0xbc>
 8002046:	4b72      	ldr	r3, [pc, #456]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a71      	ldr	r2, [pc, #452]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 800204c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	4b6f      	ldr	r3, [pc, #444]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a6e      	ldr	r2, [pc, #440]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	e00b      	b.n	8002078 <HAL_RCC_OscConfig+0xd4>
 8002060:	4b6b      	ldr	r3, [pc, #428]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a6a      	ldr	r2, [pc, #424]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	4b68      	ldr	r3, [pc, #416]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a67      	ldr	r2, [pc, #412]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002076:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d013      	beq.n	80020a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7ff fcce 	bl	8001a20 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002088:	f7ff fcca 	bl	8001a20 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b64      	cmp	r3, #100	; 0x64
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e1fa      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209a:	4b5d      	ldr	r3, [pc, #372]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0xe4>
 80020a6:	e014      	b.n	80020d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7ff fcba 	bl	8001a20 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b0:	f7ff fcb6 	bl	8001a20 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b64      	cmp	r3, #100	; 0x64
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e1e6      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c2:	4b53      	ldr	r3, [pc, #332]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f0      	bne.n	80020b0 <HAL_RCC_OscConfig+0x10c>
 80020ce:	e000      	b.n	80020d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d063      	beq.n	80021a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020de:	4b4c      	ldr	r3, [pc, #304]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00b      	beq.n	8002102 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020ea:	4b49      	ldr	r3, [pc, #292]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d11c      	bne.n	8002130 <HAL_RCC_OscConfig+0x18c>
 80020f6:	4b46      	ldr	r3, [pc, #280]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d116      	bne.n	8002130 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002102:	4b43      	ldr	r3, [pc, #268]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <HAL_RCC_OscConfig+0x176>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d001      	beq.n	800211a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e1ba      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211a:	4b3d      	ldr	r3, [pc, #244]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4939      	ldr	r1, [pc, #228]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 800212a:	4313      	orrs	r3, r2
 800212c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212e:	e03a      	b.n	80021a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d020      	beq.n	800217a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002138:	4b36      	ldr	r3, [pc, #216]	; (8002214 <HAL_RCC_OscConfig+0x270>)
 800213a:	2201      	movs	r2, #1
 800213c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213e:	f7ff fc6f 	bl	8001a20 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002146:	f7ff fc6b 	bl	8001a20 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e19b      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002158:	4b2d      	ldr	r3, [pc, #180]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0f0      	beq.n	8002146 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002164:	4b2a      	ldr	r3, [pc, #168]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4927      	ldr	r1, [pc, #156]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 8002174:	4313      	orrs	r3, r2
 8002176:	600b      	str	r3, [r1, #0]
 8002178:	e015      	b.n	80021a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800217a:	4b26      	ldr	r3, [pc, #152]	; (8002214 <HAL_RCC_OscConfig+0x270>)
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002180:	f7ff fc4e 	bl	8001a20 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002188:	f7ff fc4a 	bl	8001a20 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e17a      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219a:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d03a      	beq.n	8002228 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d019      	beq.n	80021ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ba:	4b17      	ldr	r3, [pc, #92]	; (8002218 <HAL_RCC_OscConfig+0x274>)
 80021bc:	2201      	movs	r2, #1
 80021be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c0:	f7ff fc2e 	bl	8001a20 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c8:	f7ff fc2a 	bl	8001a20 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e15a      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021da:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021e6:	2001      	movs	r0, #1
 80021e8:	f000 faa6 	bl	8002738 <RCC_Delay>
 80021ec:	e01c      	b.n	8002228 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ee:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <HAL_RCC_OscConfig+0x274>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f4:	f7ff fc14 	bl	8001a20 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021fa:	e00f      	b.n	800221c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021fc:	f7ff fc10 	bl	8001a20 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d908      	bls.n	800221c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e140      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
 800220e:	bf00      	nop
 8002210:	40021000 	.word	0x40021000
 8002214:	42420000 	.word	0x42420000
 8002218:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800221c:	4b9e      	ldr	r3, [pc, #632]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1e9      	bne.n	80021fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80a6 	beq.w	8002382 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002236:	2300      	movs	r3, #0
 8002238:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800223a:	4b97      	ldr	r3, [pc, #604]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10d      	bne.n	8002262 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002246:	4b94      	ldr	r3, [pc, #592]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	4a93      	ldr	r2, [pc, #588]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 800224c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002250:	61d3      	str	r3, [r2, #28]
 8002252:	4b91      	ldr	r3, [pc, #580]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800225e:	2301      	movs	r3, #1
 8002260:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002262:	4b8e      	ldr	r3, [pc, #568]	; (800249c <HAL_RCC_OscConfig+0x4f8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	2b00      	cmp	r3, #0
 800226c:	d118      	bne.n	80022a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800226e:	4b8b      	ldr	r3, [pc, #556]	; (800249c <HAL_RCC_OscConfig+0x4f8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a8a      	ldr	r2, [pc, #552]	; (800249c <HAL_RCC_OscConfig+0x4f8>)
 8002274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800227a:	f7ff fbd1 	bl	8001a20 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002282:	f7ff fbcd 	bl	8001a20 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b64      	cmp	r3, #100	; 0x64
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e0fd      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002294:	4b81      	ldr	r3, [pc, #516]	; (800249c <HAL_RCC_OscConfig+0x4f8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f0      	beq.n	8002282 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d106      	bne.n	80022b6 <HAL_RCC_OscConfig+0x312>
 80022a8:	4b7b      	ldr	r3, [pc, #492]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	4a7a      	ldr	r2, [pc, #488]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6213      	str	r3, [r2, #32]
 80022b4:	e02d      	b.n	8002312 <HAL_RCC_OscConfig+0x36e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x334>
 80022be:	4b76      	ldr	r3, [pc, #472]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4a75      	ldr	r2, [pc, #468]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80022c4:	f023 0301 	bic.w	r3, r3, #1
 80022c8:	6213      	str	r3, [r2, #32]
 80022ca:	4b73      	ldr	r3, [pc, #460]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4a72      	ldr	r2, [pc, #456]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	f023 0304 	bic.w	r3, r3, #4
 80022d4:	6213      	str	r3, [r2, #32]
 80022d6:	e01c      	b.n	8002312 <HAL_RCC_OscConfig+0x36e>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	2b05      	cmp	r3, #5
 80022de:	d10c      	bne.n	80022fa <HAL_RCC_OscConfig+0x356>
 80022e0:	4b6d      	ldr	r3, [pc, #436]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	4a6c      	ldr	r2, [pc, #432]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80022e6:	f043 0304 	orr.w	r3, r3, #4
 80022ea:	6213      	str	r3, [r2, #32]
 80022ec:	4b6a      	ldr	r3, [pc, #424]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	4a69      	ldr	r2, [pc, #420]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6213      	str	r3, [r2, #32]
 80022f8:	e00b      	b.n	8002312 <HAL_RCC_OscConfig+0x36e>
 80022fa:	4b67      	ldr	r3, [pc, #412]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	4a66      	ldr	r2, [pc, #408]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 8002300:	f023 0301 	bic.w	r3, r3, #1
 8002304:	6213      	str	r3, [r2, #32]
 8002306:	4b64      	ldr	r3, [pc, #400]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	4a63      	ldr	r2, [pc, #396]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 800230c:	f023 0304 	bic.w	r3, r3, #4
 8002310:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d015      	beq.n	8002346 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231a:	f7ff fb81 	bl	8001a20 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002320:	e00a      	b.n	8002338 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002322:	f7ff fb7d 	bl	8001a20 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002330:	4293      	cmp	r3, r2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e0ab      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002338:	4b57      	ldr	r3, [pc, #348]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0ee      	beq.n	8002322 <HAL_RCC_OscConfig+0x37e>
 8002344:	e014      	b.n	8002370 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002346:	f7ff fb6b 	bl	8001a20 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800234c:	e00a      	b.n	8002364 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234e:	f7ff fb67 	bl	8001a20 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	f241 3288 	movw	r2, #5000	; 0x1388
 800235c:	4293      	cmp	r3, r2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e095      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002364:	4b4c      	ldr	r3, [pc, #304]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1ee      	bne.n	800234e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002370:	7dfb      	ldrb	r3, [r7, #23]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d105      	bne.n	8002382 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002376:	4b48      	ldr	r3, [pc, #288]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	4a47      	ldr	r2, [pc, #284]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 800237c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002380:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 8081 	beq.w	800248e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800238c:	4b42      	ldr	r3, [pc, #264]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 030c 	and.w	r3, r3, #12
 8002394:	2b08      	cmp	r3, #8
 8002396:	d061      	beq.n	800245c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d146      	bne.n	800242e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a0:	4b3f      	ldr	r3, [pc, #252]	; (80024a0 <HAL_RCC_OscConfig+0x4fc>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a6:	f7ff fb3b 	bl	8001a20 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ae:	f7ff fb37 	bl	8001a20 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e067      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c0:	4b35      	ldr	r3, [pc, #212]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1f0      	bne.n	80023ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d4:	d108      	bne.n	80023e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023d6:	4b30      	ldr	r3, [pc, #192]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	492d      	ldr	r1, [pc, #180]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023e8:	4b2b      	ldr	r3, [pc, #172]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a19      	ldr	r1, [r3, #32]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	430b      	orrs	r3, r1
 80023fa:	4927      	ldr	r1, [pc, #156]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002400:	4b27      	ldr	r3, [pc, #156]	; (80024a0 <HAL_RCC_OscConfig+0x4fc>)
 8002402:	2201      	movs	r2, #1
 8002404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002406:	f7ff fb0b 	bl	8001a20 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240e:	f7ff fb07 	bl	8001a20 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e037      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002420:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x46a>
 800242c:	e02f      	b.n	800248e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242e:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <HAL_RCC_OscConfig+0x4fc>)
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002434:	f7ff faf4 	bl	8001a20 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243c:	f7ff faf0 	bl	8001a20 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e020      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800244e:	4b12      	ldr	r3, [pc, #72]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0x498>
 800245a:	e018      	b.n	800248e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d101      	bne.n	8002468 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e013      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_RCC_OscConfig+0x4f4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	429a      	cmp	r2, r3
 800247a:	d106      	bne.n	800248a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002486:	429a      	cmp	r2, r3
 8002488:	d001      	beq.n	800248e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	40007000 	.word	0x40007000
 80024a0:	42420060 	.word	0x42420060

080024a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0d0      	b.n	800265a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024b8:	4b6a      	ldr	r3, [pc, #424]	; (8002664 <HAL_RCC_ClockConfig+0x1c0>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d910      	bls.n	80024e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c6:	4b67      	ldr	r3, [pc, #412]	; (8002664 <HAL_RCC_ClockConfig+0x1c0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 0207 	bic.w	r2, r3, #7
 80024ce:	4965      	ldr	r1, [pc, #404]	; (8002664 <HAL_RCC_ClockConfig+0x1c0>)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	4b63      	ldr	r3, [pc, #396]	; (8002664 <HAL_RCC_ClockConfig+0x1c0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0b8      	b.n	800265a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d020      	beq.n	8002536 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002500:	4b59      	ldr	r3, [pc, #356]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	4a58      	ldr	r2, [pc, #352]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800250a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002518:	4b53      	ldr	r3, [pc, #332]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	4a52      	ldr	r2, [pc, #328]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 800251e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002522:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002524:	4b50      	ldr	r3, [pc, #320]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	494d      	ldr	r1, [pc, #308]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d040      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d107      	bne.n	800255a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254a:	4b47      	ldr	r3, [pc, #284]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d115      	bne.n	8002582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e07f      	b.n	800265a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d107      	bne.n	8002572 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002562:	4b41      	ldr	r3, [pc, #260]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d109      	bne.n	8002582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e073      	b.n	800265a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002572:	4b3d      	ldr	r3, [pc, #244]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e06b      	b.n	800265a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002582:	4b39      	ldr	r3, [pc, #228]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f023 0203 	bic.w	r2, r3, #3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4936      	ldr	r1, [pc, #216]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002594:	f7ff fa44 	bl	8001a20 <HAL_GetTick>
 8002598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259a:	e00a      	b.n	80025b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800259c:	f7ff fa40 	bl	8001a20 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e053      	b.n	800265a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b2:	4b2d      	ldr	r3, [pc, #180]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 020c 	and.w	r2, r3, #12
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d1eb      	bne.n	800259c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025c4:	4b27      	ldr	r3, [pc, #156]	; (8002664 <HAL_RCC_ClockConfig+0x1c0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d210      	bcs.n	80025f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d2:	4b24      	ldr	r3, [pc, #144]	; (8002664 <HAL_RCC_ClockConfig+0x1c0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 0207 	bic.w	r2, r3, #7
 80025da:	4922      	ldr	r1, [pc, #136]	; (8002664 <HAL_RCC_ClockConfig+0x1c0>)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	4313      	orrs	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	4b20      	ldr	r3, [pc, #128]	; (8002664 <HAL_RCC_ClockConfig+0x1c0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e032      	b.n	800265a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4916      	ldr	r1, [pc, #88]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	4313      	orrs	r3, r2
 8002610:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d009      	beq.n	8002632 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800261e:	4b12      	ldr	r3, [pc, #72]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	490e      	ldr	r1, [pc, #56]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	4313      	orrs	r3, r2
 8002630:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002632:	f000 f821 	bl	8002678 <HAL_RCC_GetSysClockFreq>
 8002636:	4602      	mov	r2, r0
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	490a      	ldr	r1, [pc, #40]	; (800266c <HAL_RCC_ClockConfig+0x1c8>)
 8002644:	5ccb      	ldrb	r3, [r1, r3]
 8002646:	fa22 f303 	lsr.w	r3, r2, r3
 800264a:	4a09      	ldr	r2, [pc, #36]	; (8002670 <HAL_RCC_ClockConfig+0x1cc>)
 800264c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800264e:	4b09      	ldr	r3, [pc, #36]	; (8002674 <HAL_RCC_ClockConfig+0x1d0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff f9a2 	bl	800199c <HAL_InitTick>

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40022000 	.word	0x40022000
 8002668:	40021000 	.word	0x40021000
 800266c:	08002fbc 	.word	0x08002fbc
 8002670:	20000034 	.word	0x20000034
 8002674:	20000038 	.word	0x20000038

08002678 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002678:	b490      	push	{r4, r7}
 800267a:	b08a      	sub	sp, #40	; 0x28
 800267c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800267e:	4b2a      	ldr	r3, [pc, #168]	; (8002728 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002680:	1d3c      	adds	r4, r7, #4
 8002682:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002684:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002688:	f240 2301 	movw	r3, #513	; 0x201
 800268c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	2300      	movs	r3, #0
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	2300      	movs	r3, #0
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026a2:	4b22      	ldr	r3, [pc, #136]	; (800272c <HAL_RCC_GetSysClockFreq+0xb4>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d002      	beq.n	80026b8 <HAL_RCC_GetSysClockFreq+0x40>
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d003      	beq.n	80026be <HAL_RCC_GetSysClockFreq+0x46>
 80026b6:	e02d      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026b8:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026ba:	623b      	str	r3, [r7, #32]
      break;
 80026bc:	e02d      	b.n	800271a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	0c9b      	lsrs	r3, r3, #18
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026ca:	4413      	add	r3, r2
 80026cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d013      	beq.n	8002704 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026dc:	4b13      	ldr	r3, [pc, #76]	; (800272c <HAL_RCC_GetSysClockFreq+0xb4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	0c5b      	lsrs	r3, r3, #17
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026ea:	4413      	add	r3, r2
 80026ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	4a0e      	ldr	r2, [pc, #56]	; (8002730 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026f6:	fb02 f203 	mul.w	r2, r2, r3
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
 8002702:	e004      	b.n	800270e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	4a0b      	ldr	r2, [pc, #44]	; (8002734 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002708:	fb02 f303 	mul.w	r3, r2, r3
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	623b      	str	r3, [r7, #32]
      break;
 8002712:	e002      	b.n	800271a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002716:	623b      	str	r3, [r7, #32]
      break;
 8002718:	bf00      	nop
    }
  }
  return sysclockfreq;
 800271a:	6a3b      	ldr	r3, [r7, #32]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3728      	adds	r7, #40	; 0x28
 8002720:	46bd      	mov	sp, r7
 8002722:	bc90      	pop	{r4, r7}
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	08002fac 	.word	0x08002fac
 800272c:	40021000 	.word	0x40021000
 8002730:	007a1200 	.word	0x007a1200
 8002734:	003d0900 	.word	0x003d0900

08002738 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002740:	4b0a      	ldr	r3, [pc, #40]	; (800276c <RCC_Delay+0x34>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a0a      	ldr	r2, [pc, #40]	; (8002770 <RCC_Delay+0x38>)
 8002746:	fba2 2303 	umull	r2, r3, r2, r3
 800274a:	0a5b      	lsrs	r3, r3, #9
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	fb02 f303 	mul.w	r3, r2, r3
 8002752:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002754:	bf00      	nop
  }
  while (Delay --);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	1e5a      	subs	r2, r3, #1
 800275a:	60fa      	str	r2, [r7, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1f9      	bne.n	8002754 <RCC_Delay+0x1c>
}
 8002760:	bf00      	nop
 8002762:	bf00      	nop
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr
 800276c:	20000034 	.word	0x20000034
 8002770:	10624dd3 	.word	0x10624dd3

08002774 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e041      	b.n	800280a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff f866 	bl	800186c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3304      	adds	r3, #4
 80027b0:	4619      	mov	r1, r3
 80027b2:	4610      	mov	r0, r2
 80027b4:	f000 fa6a 	bl	8002c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b01      	cmp	r3, #1
 8002826:	d001      	beq.n	800282c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e035      	b.n	8002898 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a16      	ldr	r2, [pc, #88]	; (80028a4 <HAL_TIM_Base_Start_IT+0x90>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d009      	beq.n	8002862 <HAL_TIM_Base_Start_IT+0x4e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002856:	d004      	beq.n	8002862 <HAL_TIM_Base_Start_IT+0x4e>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a12      	ldr	r2, [pc, #72]	; (80028a8 <HAL_TIM_Base_Start_IT+0x94>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d111      	bne.n	8002886 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2b06      	cmp	r3, #6
 8002872:	d010      	beq.n	8002896 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002884:	e007      	b.n	8002896 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0201 	orr.w	r2, r2, #1
 8002894:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40012c00 	.word	0x40012c00
 80028a8:	40000400 	.word	0x40000400

080028ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d122      	bne.n	8002908 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d11b      	bne.n	8002908 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0202 	mvn.w	r2, #2
 80028d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f9b1 	bl	8002c56 <HAL_TIM_IC_CaptureCallback>
 80028f4:	e005      	b.n	8002902 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f9a4 	bl	8002c44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f9b3 	bl	8002c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	2b04      	cmp	r3, #4
 8002914:	d122      	bne.n	800295c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b04      	cmp	r3, #4
 8002922:	d11b      	bne.n	800295c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0204 	mvn.w	r2, #4
 800292c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2202      	movs	r2, #2
 8002932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f987 	bl	8002c56 <HAL_TIM_IC_CaptureCallback>
 8002948:	e005      	b.n	8002956 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f97a 	bl	8002c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f989 	bl	8002c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b08      	cmp	r3, #8
 8002968:	d122      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b08      	cmp	r3, #8
 8002976:	d11b      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f06f 0208 	mvn.w	r2, #8
 8002980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2204      	movs	r2, #4
 8002986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f95d 	bl	8002c56 <HAL_TIM_IC_CaptureCallback>
 800299c:	e005      	b.n	80029aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f950 	bl	8002c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f95f 	bl	8002c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f003 0310 	and.w	r3, r3, #16
 80029ba:	2b10      	cmp	r3, #16
 80029bc:	d122      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0310 	and.w	r3, r3, #16
 80029c8:	2b10      	cmp	r3, #16
 80029ca:	d11b      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f06f 0210 	mvn.w	r2, #16
 80029d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2208      	movs	r2, #8
 80029da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f933 	bl	8002c56 <HAL_TIM_IC_CaptureCallback>
 80029f0:	e005      	b.n	80029fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f926 	bl	8002c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f935 	bl	8002c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d10e      	bne.n	8002a30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d107      	bne.n	8002a30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0201 	mvn.w	r2, #1
 8002a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fe fe68 	bl	8001700 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3a:	2b80      	cmp	r3, #128	; 0x80
 8002a3c:	d10e      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a48:	2b80      	cmp	r3, #128	; 0x80
 8002a4a:	d107      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 fa67 	bl	8002f2a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a66:	2b40      	cmp	r3, #64	; 0x40
 8002a68:	d10e      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a74:	2b40      	cmp	r3, #64	; 0x40
 8002a76:	d107      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f8f9 	bl	8002c7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f003 0320 	and.w	r3, r3, #32
 8002a92:	2b20      	cmp	r3, #32
 8002a94:	d10e      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b20      	cmp	r3, #32
 8002aa2:	d107      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0220 	mvn.w	r2, #32
 8002aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fa32 	bl	8002f18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_TIM_ConfigClockSource+0x18>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e0b3      	b.n	8002c3c <HAL_TIM_ConfigClockSource+0x180>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002af2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002afa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b0c:	d03e      	beq.n	8002b8c <HAL_TIM_ConfigClockSource+0xd0>
 8002b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b12:	f200 8087 	bhi.w	8002c24 <HAL_TIM_ConfigClockSource+0x168>
 8002b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b1a:	f000 8085 	beq.w	8002c28 <HAL_TIM_ConfigClockSource+0x16c>
 8002b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b22:	d87f      	bhi.n	8002c24 <HAL_TIM_ConfigClockSource+0x168>
 8002b24:	2b70      	cmp	r3, #112	; 0x70
 8002b26:	d01a      	beq.n	8002b5e <HAL_TIM_ConfigClockSource+0xa2>
 8002b28:	2b70      	cmp	r3, #112	; 0x70
 8002b2a:	d87b      	bhi.n	8002c24 <HAL_TIM_ConfigClockSource+0x168>
 8002b2c:	2b60      	cmp	r3, #96	; 0x60
 8002b2e:	d050      	beq.n	8002bd2 <HAL_TIM_ConfigClockSource+0x116>
 8002b30:	2b60      	cmp	r3, #96	; 0x60
 8002b32:	d877      	bhi.n	8002c24 <HAL_TIM_ConfigClockSource+0x168>
 8002b34:	2b50      	cmp	r3, #80	; 0x50
 8002b36:	d03c      	beq.n	8002bb2 <HAL_TIM_ConfigClockSource+0xf6>
 8002b38:	2b50      	cmp	r3, #80	; 0x50
 8002b3a:	d873      	bhi.n	8002c24 <HAL_TIM_ConfigClockSource+0x168>
 8002b3c:	2b40      	cmp	r3, #64	; 0x40
 8002b3e:	d058      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0x136>
 8002b40:	2b40      	cmp	r3, #64	; 0x40
 8002b42:	d86f      	bhi.n	8002c24 <HAL_TIM_ConfigClockSource+0x168>
 8002b44:	2b30      	cmp	r3, #48	; 0x30
 8002b46:	d064      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0x156>
 8002b48:	2b30      	cmp	r3, #48	; 0x30
 8002b4a:	d86b      	bhi.n	8002c24 <HAL_TIM_ConfigClockSource+0x168>
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	d060      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0x156>
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d867      	bhi.n	8002c24 <HAL_TIM_ConfigClockSource+0x168>
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d05c      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0x156>
 8002b58:	2b10      	cmp	r3, #16
 8002b5a:	d05a      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b5c:	e062      	b.n	8002c24 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6899      	ldr	r1, [r3, #8]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f000 f95c 	bl	8002e2a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b80:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	609a      	str	r2, [r3, #8]
      break;
 8002b8a:	e04e      	b.n	8002c2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	6899      	ldr	r1, [r3, #8]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f000 f945 	bl	8002e2a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bae:	609a      	str	r2, [r3, #8]
      break;
 8002bb0:	e03b      	b.n	8002c2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	6859      	ldr	r1, [r3, #4]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	f000 f8bc 	bl	8002d3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2150      	movs	r1, #80	; 0x50
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 f913 	bl	8002df6 <TIM_ITRx_SetConfig>
      break;
 8002bd0:	e02b      	b.n	8002c2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	6859      	ldr	r1, [r3, #4]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	461a      	mov	r2, r3
 8002be0:	f000 f8da 	bl	8002d98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2160      	movs	r1, #96	; 0x60
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 f903 	bl	8002df6 <TIM_ITRx_SetConfig>
      break;
 8002bf0:	e01b      	b.n	8002c2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	6859      	ldr	r1, [r3, #4]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f000 f89c 	bl	8002d3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2140      	movs	r1, #64	; 0x40
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f8f3 	bl	8002df6 <TIM_ITRx_SetConfig>
      break;
 8002c10:	e00b      	b.n	8002c2a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	f000 f8ea 	bl	8002df6 <TIM_ITRx_SetConfig>
        break;
 8002c22:	e002      	b.n	8002c2a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c24:	bf00      	nop
 8002c26:	e000      	b.n	8002c2a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c28:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr

08002c56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr

08002c7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a25      	ldr	r2, [pc, #148]	; (8002d34 <TIM_Base_SetConfig+0xa8>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d007      	beq.n	8002cb4 <TIM_Base_SetConfig+0x28>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002caa:	d003      	beq.n	8002cb4 <TIM_Base_SetConfig+0x28>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a22      	ldr	r2, [pc, #136]	; (8002d38 <TIM_Base_SetConfig+0xac>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d108      	bne.n	8002cc6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a1a      	ldr	r2, [pc, #104]	; (8002d34 <TIM_Base_SetConfig+0xa8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d007      	beq.n	8002cde <TIM_Base_SetConfig+0x52>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd4:	d003      	beq.n	8002cde <TIM_Base_SetConfig+0x52>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a17      	ldr	r2, [pc, #92]	; (8002d38 <TIM_Base_SetConfig+0xac>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d108      	bne.n	8002cf0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a07      	ldr	r2, [pc, #28]	; (8002d34 <TIM_Base_SetConfig+0xa8>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d103      	bne.n	8002d24 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	615a      	str	r2, [r3, #20]
}
 8002d2a:	bf00      	nop
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr
 8002d34:	40012c00 	.word	0x40012c00
 8002d38:	40000400 	.word	0x40000400

08002d3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	f023 0201 	bic.w	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f023 030a 	bic.w	r3, r3, #10
 8002d78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	621a      	str	r2, [r3, #32]
}
 8002d8e:	bf00      	nop
 8002d90:	371c      	adds	r7, #28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	f023 0210 	bic.w	r2, r3, #16
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	031b      	lsls	r3, r3, #12
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	621a      	str	r2, [r3, #32]
}
 8002dec:	bf00      	nop
 8002dee:	371c      	adds	r7, #28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr

08002df6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b085      	sub	sp, #20
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f043 0307 	orr.w	r3, r3, #7
 8002e18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	609a      	str	r2, [r3, #8]
}
 8002e20:	bf00      	nop
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr

08002e2a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b087      	sub	sp, #28
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	607a      	str	r2, [r7, #4]
 8002e36:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e44:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	021a      	lsls	r2, r3, #8
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	609a      	str	r2, [r3, #8]
}
 8002e5e:	bf00      	nop
 8002e60:	371c      	adds	r7, #28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e041      	b.n	8002f04 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a14      	ldr	r2, [pc, #80]	; (8002f10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d009      	beq.n	8002ed8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ecc:	d004      	beq.n	8002ed8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a10      	ldr	r2, [pc, #64]	; (8002f14 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d10c      	bne.n	8002ef2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ede:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40012c00 	.word	0x40012c00
 8002f14:	40000400 	.word	0x40000400

08002f18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr

08002f2a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr

08002f3c <__libc_init_array>:
 8002f3c:	b570      	push	{r4, r5, r6, lr}
 8002f3e:	2600      	movs	r6, #0
 8002f40:	4d0c      	ldr	r5, [pc, #48]	; (8002f74 <__libc_init_array+0x38>)
 8002f42:	4c0d      	ldr	r4, [pc, #52]	; (8002f78 <__libc_init_array+0x3c>)
 8002f44:	1b64      	subs	r4, r4, r5
 8002f46:	10a4      	asrs	r4, r4, #2
 8002f48:	42a6      	cmp	r6, r4
 8002f4a:	d109      	bne.n	8002f60 <__libc_init_array+0x24>
 8002f4c:	f000 f822 	bl	8002f94 <_init>
 8002f50:	2600      	movs	r6, #0
 8002f52:	4d0a      	ldr	r5, [pc, #40]	; (8002f7c <__libc_init_array+0x40>)
 8002f54:	4c0a      	ldr	r4, [pc, #40]	; (8002f80 <__libc_init_array+0x44>)
 8002f56:	1b64      	subs	r4, r4, r5
 8002f58:	10a4      	asrs	r4, r4, #2
 8002f5a:	42a6      	cmp	r6, r4
 8002f5c:	d105      	bne.n	8002f6a <__libc_init_array+0x2e>
 8002f5e:	bd70      	pop	{r4, r5, r6, pc}
 8002f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f64:	4798      	blx	r3
 8002f66:	3601      	adds	r6, #1
 8002f68:	e7ee      	b.n	8002f48 <__libc_init_array+0xc>
 8002f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f6e:	4798      	blx	r3
 8002f70:	3601      	adds	r6, #1
 8002f72:	e7f2      	b.n	8002f5a <__libc_init_array+0x1e>
 8002f74:	08002fcc 	.word	0x08002fcc
 8002f78:	08002fcc 	.word	0x08002fcc
 8002f7c:	08002fcc 	.word	0x08002fcc
 8002f80:	08002fd0 	.word	0x08002fd0

08002f84 <memset>:
 8002f84:	4603      	mov	r3, r0
 8002f86:	4402      	add	r2, r0
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d100      	bne.n	8002f8e <memset+0xa>
 8002f8c:	4770      	bx	lr
 8002f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f92:	e7f9      	b.n	8002f88 <memset+0x4>

08002f94 <_init>:
 8002f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f96:	bf00      	nop
 8002f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f9a:	bc08      	pop	{r3}
 8002f9c:	469e      	mov	lr, r3
 8002f9e:	4770      	bx	lr

08002fa0 <_fini>:
 8002fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa2:	bf00      	nop
 8002fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fa6:	bc08      	pop	{r3}
 8002fa8:	469e      	mov	lr, r3
 8002faa:	4770      	bx	lr
